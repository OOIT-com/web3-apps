export const secureBlockchainTableAbi = [
  {
    inputs: [
      {
        internalType: 'string',
        name: '_encSecret',
        type: 'string'
      }
    ],
    stateMutability: 'nonpayable',
    type: 'constructor'
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: 'address', name: 'previousOwner', type: 'address' },
      {
        indexed: true,
        internalType: 'address',
        name: 'newOwner',
        type: 'address'
      }
    ],
    name: 'OwnershipTransferred',
    type: 'event'
  },
  {
    inputs: [],
    name: 'activateOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    inputs: [{ internalType: 'address', name: 'newBackupOwner', type: 'address' }],
    name: 'addBackupOwner',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    inputs: [
      { internalType: 'string', name: '_content', type: 'string' },
      {
        internalType: 'uint256',
        name: '_status',
        type: 'uint256'
      }
    ],
    name: 'addDataRow',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    inputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    name: 'backupOwnerAddressList',
    outputs: [{ internalType: 'address', name: '', type: 'address' }],
    stateMutability: 'view',
    type: 'function'
  },
  {
    inputs: [{ internalType: 'address', name: '', type: 'address' }],
    name: 'backupOwnerDataMap',
    outputs: [
      { internalType: 'address', name: 'newOwner', type: 'address' },
      {
        internalType: 'uint256',
        name: 'timestamp',
        type: 'uint256'
      }
    ],
    stateMutability: 'view',
    type: 'function'
  },
  {
    inputs: [{ internalType: 'address', name: '', type: 'address' }],
    name: 'backupOwnerIndicesMap',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function'
  },
  {
    inputs: [
      { internalType: 'uint256', name: '', type: 'uint256' },
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256'
      }
    ],
    name: 'dataRowList',
    outputs: [
      { internalType: 'address', name: 'userAddress', type: 'address' },
      {
        internalType: 'string',
        name: 'content',
        type: 'string'
      },
      { internalType: 'uint256', name: 'status', type: 'uint256' },
      {
        internalType: 'uint256',
        name: 'created',
        type: 'uint256'
      },
      { internalType: 'uint256', name: 'version', type: 'uint256' }
    ],
    stateMutability: 'view',
    type: 'function'
  },
  {
    inputs: [],
    name: 'editable',
    outputs: [{ internalType: 'bool', name: '', type: 'bool' }],
    stateMutability: 'view',
    type: 'function'
  },
  {
    inputs: [{ internalType: 'uint256', name: 'index', type: 'uint256' }],
    name: 'getBackupOwner',
    outputs: [{ internalType: 'address', name: '', type: 'address' }],
    stateMutability: 'view',
    type: 'function'
  },
  {
    inputs: [],
    name: 'getBackupOwnerCount',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function'
  },
  {
    inputs: [
      { internalType: 'uint256', name: '_rowIndex', type: 'uint256' },
      {
        internalType: 'uint256',
        name: '_version',
        type: 'uint256'
      }
    ],
    name: 'getDataRow',
    outputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'userAddress',
            type: 'address'
          },
          { internalType: 'string', name: 'content', type: 'string' },
          {
            internalType: 'uint256',
            name: 'status',
            type: 'uint256'
          },
          { internalType: 'uint256', name: 'created', type: 'uint256' },
          {
            internalType: 'uint256',
            name: 'version',
            type: 'uint256'
          }
        ],
        internalType: 'struct SecureBlockchainTable.DataRow',
        name: '',
        type: 'tuple'
      }
    ],
    stateMutability: 'view',
    type: 'function'
  },
  {
    inputs: [],
    name: 'getDataRowCount',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function'
  },
  {
    inputs: [{ internalType: 'uint256', name: '_rowIndex', type: 'uint256' }],
    name: 'getDataRowVersionCount',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function'
  },
  {
    inputs: [],
    name: 'getInitialData',
    outputs: [{ internalType: 'string', name: '', type: 'string' }],
    stateMutability: 'view',
    type: 'function'
  },
  {
    inputs: [{ internalType: 'uint256', name: '_rowIndex', type: 'uint256' }],
    name: 'getLatestDataRowVersion',
    outputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'userAddress',
            type: 'address'
          },
          { internalType: 'string', name: 'content', type: 'string' },
          {
            internalType: 'uint256',
            name: 'status',
            type: 'uint256'
          },
          { internalType: 'uint256', name: 'created', type: 'uint256' },
          {
            internalType: 'uint256',
            name: 'version',
            type: 'uint256'
          }
        ],
        internalType: 'struct SecureBlockchainTable.DataRow',
        name: '',
        type: 'tuple'
      }
    ],
    stateMutability: 'view',
    type: 'function'
  },
  {
    inputs: [],
    name: 'getMaxNumberOfBackupOwners',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function'
  },
  {
    inputs: [],
    name: 'getMetaData',
    outputs: [{ internalType: 'string', name: '', type: 'string' }],
    stateMutability: 'view',
    type: 'function'
  },
  {
    inputs: [],
    name: 'getMinNumberOfVotes',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function'
  },
  {
    inputs: [{ internalType: 'uint256', name: '_index', type: 'uint256' }],
    name: 'getUser',
    outputs: [{ internalType: 'address', name: '', type: 'address' }],
    stateMutability: 'view',
    type: 'function'
  },
  {
    inputs: [],
    name: 'getUserCount',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function'
  },
  {
    inputs: [{ internalType: 'uint256', name: '_index', type: 'uint256' }],
    name: 'getUserHistory',
    outputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'owner',
            type: 'address'
          },
          { internalType: 'address', name: 'userAddress', type: 'address' },
          {
            internalType: 'uint256',
            name: 'action',
            type: 'uint256'
          },
          { internalType: 'uint256', name: 'created', type: 'uint256' }
        ],
        internalType: 'struct SecureBlockchainTable.UserActionLog',
        name: '',
        type: 'tuple'
      }
    ],
    stateMutability: 'view',
    type: 'function'
  },
  {
    inputs: [],
    name: 'getUserHistoryCount',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function'
  },
  {
    inputs: [],
    name: 'initialData',
    outputs: [{ internalType: 'string', name: '', type: 'string' }],
    stateMutability: 'view',
    type: 'function'
  },
  {
    inputs: [],
    name: 'isEditable',
    outputs: [{ internalType: 'bool', name: '', type: 'bool' }],
    stateMutability: 'view',
    type: 'function'
  },
  {
    inputs: [],
    name: 'maxMaxNumberOfBackupOwners',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function'
  },
  {
    inputs: [],
    name: 'metaData',
    outputs: [{ internalType: 'string', name: '', type: 'string' }],
    stateMutability: 'view',
    type: 'function'
  },
  {
    inputs: [],
    name: 'minNumberOfVotes',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function'
  },
  {
    inputs: [],
    name: 'owner',
    outputs: [{ internalType: 'address', name: '', type: 'address' }],
    stateMutability: 'view',
    type: 'function'
  },
  {
    inputs: [{ internalType: 'address', name: 'addr', type: 'address' }],
    name: 'removeBackupOwner',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    inputs: [{ internalType: 'address', name: '_user', type: 'address' }],
    name: 'removeEncSecret',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    inputs: [
      { internalType: 'uint256', name: '_rowIndex', type: 'uint256' },
      {
        internalType: 'string',
        name: '_content',
        type: 'string'
      },
      { internalType: 'uint256', name: '_status', type: 'uint256' }
    ],
    name: 'setDataRow',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    inputs: [{ internalType: 'bool', name: '_editable', type: 'bool' }],
    name: 'setEditable',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    inputs: [
      { internalType: 'address', name: '_user', type: 'address' },
      {
        internalType: 'string',
        name: '_encSecret',
        type: 'string'
      }
    ],
    name: 'setEncSecret',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    inputs: [{ internalType: 'string', name: '_initialData', type: 'string' }],
    name: 'setInitialData',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    inputs: [{ internalType: 'uint256', name: 'newNumber', type: 'uint256' }],
    name: 'setMaxNumberOfBackupOwners',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    inputs: [{ internalType: 'string', name: '_metaData', type: 'string' }],
    name: 'setMetaData',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    inputs: [{ internalType: 'uint256', name: 'newMinVotes', type: 'uint256' }],
    name: 'setMinNumberOfVotes',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    inputs: [{ internalType: 'address', name: 'newOwner', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    inputs: [{ internalType: 'address', name: '', type: 'address' }],
    name: 'userEncSecretMap',
    outputs: [{ internalType: 'string', name: '', type: 'string' }],
    stateMutability: 'view',
    type: 'function'
  },
  {
    inputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    name: 'userHistory',
    outputs: [
      { internalType: 'address', name: 'owner', type: 'address' },
      {
        internalType: 'address',
        name: 'userAddress',
        type: 'address'
      },
      { internalType: 'uint256', name: 'action', type: 'uint256' },
      {
        internalType: 'uint256',
        name: 'created',
        type: 'uint256'
      }
    ],
    stateMutability: 'view',
    type: 'function'
  },
  {
    inputs: [{ internalType: 'address', name: '', type: 'address' }],
    name: 'userIndexMap',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function'
  },
  {
    inputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    name: 'userList',
    outputs: [{ internalType: 'address', name: '', type: 'address' }],
    stateMutability: 'view',
    type: 'function'
  },
  {
    inputs: [{ internalType: 'address', name: 'newOwner', type: 'address' }],
    name: 'voteForNewOwner',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  }
] as const;
export const secureBlockchainTableBytecode =
  '6080604052600560015560036002553480156200001b57600080fd5b5060405162002a4638038062002a468339810160408190526200003e91620003e9565b620000526200004c6200007b565b6200007f565b600c805460ff19166001179055620000746200006d6200007b565b82620000cf565b50620005bd565b3390565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b620000d9620002ec565b6000815111620001065760405162461bcd60e51b8152600401620000fd9062000533565b60405180910390fd5b6001600160a01b038216600090815260066020526040902080546200012b906200056a565b1590506200014d5760405162461bcd60e51b8152600401620000fd90620004b8565b6001600160a01b03821660009081526006602090815260409091208251620001789284019062000343565b50600780546001600160a01b0384166000818152600860205260408082208490556001840185559381527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68890920180546001600160a01b03191690911790558151608081019092529080620001ec6200007b565b6001600160a01b0390811682529485166020808301919091526001604080840182905242606094850152600980549283018155600052845160049092027f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af81018054938a166001600160a01b0319948516179055928501517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b08401805491909916921691909117909655948201517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b186015501517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b2909301929092555050565b620002f66200007b565b6001600160a01b03166200030962000334565b6001600160a01b031614620003325760405162461bcd60e51b8152600401620000fd90620004fe565b565b6000546001600160a01b031690565b82805462000351906200056a565b90600052602060002090601f016020900481019282620003755760008555620003c0565b82601f106200039057805160ff1916838001178555620003c0565b82800160010185558215620003c0579182015b82811115620003c0578251825591602001919060010190620003a3565b50620003ce929150620003d2565b5090565b5b80821115620003ce5760008155600101620003d3565b60006020808385031215620003fc578182fd5b82516001600160401b038082111562000413578384fd5b818501915085601f83011262000427578384fd5b8151818111156200043c576200043c620005a7565b604051601f8201601f1916810185018381118282101715620004625762000462620005a7565b604052818152838201850188101562000479578586fd5b8592505b818310156200049c57838301850151818401860152918401916200047d565b81831115620004ad57858583830101525b979650505050505050565b60208082526026908201527f456e637279707465642053656372657420656e74727920616c7265616479206560408201526578697374732160d01b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601a908201527f456e637279707465642053656372657420697320656d70747921000000000000604082015260600190565b6002810460018216806200057f57607f821691505b60208210811415620005a157634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b61247980620005cd6000396000f3fe608060405234801561001057600080fd5b50600436106102745760003560e01c80638b80e95611610151578063b5cb15f7116100c3578063da140c8511610087578063da140c8514610513578063dfee322e1461051b578063f2a1625e1461053c578063f2fde38b1461055c578063f8d9f22c1461056f578063fd2939ad1461057757610274565b8063b5cb15f7146104c5578063ba094811146104cd578063baf2a4eb146104f0578063d2786ba4146104f8578063d821f81a1461050057610274565b8063972368ac11610115578063972368ac146104695780639f4216e81461047c578063a66c94e91461048f578063b0467deb146104a2578063b11d0f8b146104b5578063b4da4e37146104bd57610274565b80638b80e956146104085780638c9d86611461041b5780638da1d3f21461042e5780638da5cb5b1461044157806393a958b11461045657610274565b806357597c3d116101ea5780636f895b83116101ae5780636f895b83146103aa578063715018a6146103b257806372d05f6d146103ba5780638453caa4146103cd5780638576384c146103e057806386d2f394146103f557610274565b806357597c3d1461034e5780635da347b3146103635780636863b5f81461037657806368b683321461039a5780636e8dba91146103a257610274565b80632cb0d48a1161023c5780632cb0d48a146102e55780632d5c9c99146102f857806332289ff41461030b5780633927f14d1461031e578063482f055c1461033e578063533b7d851461034657610274565b80630cfa11511461027957806313414884146102a2578063186f93fc146102aa578063266316db146102bd5780632bcba828146102d2575b600080fd5b61028c610287366004611e43565b61058a565b60405161029991906123a1565b60405180910390f35b61028c6105ec565b61028c6102b8366004611d38565b6105f2565b6102d06102cb366004611e43565b610604565b005b6102d06102e0366004611e43565b610611565b6102d06102f3366004611da5565b61061e565b6102d0610306366004611d38565b610639565b6102d0610319366004611e5b565b610784565b61033161032c366004611ea9565b610933565b6040516102999190612310565b61028c610ad9565b61028c610adf565b610356610ae5565b6040516102999190611fb7565b6102d0610371366004611d38565b610b73565b610389610384366004611ea9565b610e49565b604051610299959493929190611f52565b61028c610f37565b610356610f3d565b61028c610fcf565b6102d0610fd5565b6102d06103c8366004611d38565b610fe9565b6102d06103db366004611d59565b611173565b6103e8611379565b6040516102999190611fac565b61028c610403366004611e00565b611382565b61028c610416366004611d38565b6114fe565b610331610429366004611e43565b611510565b6102d061043c366004611dc5565b6116a2565b6104496116c1565b6040516102999190611f15565b610356610464366004611d38565b6116d0565b610449610477366004611e43565b6116e9565b61044961048a366004611e43565b611727565b6102d061049d366004611d38565b611751565b6104496104b0366004611e43565b611831565b6102d0611854565b6103e8611945565b61028c61194e565b6104e06104db366004611e43565b611954565b6040516102999493929190611f29565b61035661199a565b6103566119a7565b6102d061050e366004611dc5565b6119b6565b61028c6119d1565b61052e610529366004611d38565b6119d7565b604051610299929190611f93565b61054f61054a366004611e43565b6119fc565b6040516102999190612368565b6102d061056a366004611d38565b611a79565b61028c611ab0565b610449610585366004611e43565b611ab6565b600d5460009082106105b75760405162461bcd60e51b81526004016105ae906120b4565b60405180910390fd5b600d82815481106105d857634e487b7160e01b600052603260045260246000fd5b60009182526020909120015490505b919050565b60025481565b60046020526000908152604090205481565b61060c611ac6565b600155565b610619611ac6565b600255565b610626611ac6565b600c805460ff1916911515919091179055565b610641611ac6565b80806001600160a01b03166106546116c1565b6001600160a01b0316141561067b5760405162461bcd60e51b81526004016105ae90612117565b6001600160a01b03808316600090815260036020526040902054839116156106b55760405162461bcd60e51b81526004016105ae90611fca565b600580546001810182556000919091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180546001600160a01b0319166001600160a01b03851617905560408051808201909152806107136116c1565b6001600160a01b0390811682524260209283015285811660009081526003835260409020835181546001600160a01b031916921691909117815591015160019182015560055461076391906123aa565b6001600160a01b039093166000908152600460205260409020929092555050565b600c5460ff166107a65760405162461bcd60e51b81526004016105ae90612047565b600d5483106107c75760405162461bcd60e51b81526004016105ae906122ac565b6000600660006107d5611b05565b6001600160a01b03166001600160a01b031681526020019081526020016000208054610800906123c1565b90501161081f5760405162461bcd60e51b81526004016105ae906121b3565b60006040518060a00160405280610834611b05565b6001600160a01b03168152602001848152602001838152602001428152602001600d868154811061087557634e487b7160e01b600052603260045260246000fd5b6000918252602090912001549052600d5490915084101561092d57600d84815481106108b157634e487b7160e01b600052603260045260246000fd5b600091825260208083209190910180546001808201835591845292829020845160059094020180546001600160a01b0319166001600160a01b0390941693909317835583820151805185949361090b938501920190611b59565b5060408201518160020155606082015181600301556080820151816004015550505b50505050565b61093b611bdd565b600d54831061095c5760405162461bcd60e51b81526004016105ae906120b4565b81600d848154811061097e57634e487b7160e01b600052603260045260246000fd5b600091825260209091200154116109a75760405162461bcd60e51b81526004016105ae9061214e565b600d83815481106109c857634e487b7160e01b600052603260045260246000fd5b9060005260206000200182815481106109f157634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805160a0810190915260059092020180546001600160a01b031682526001810180549293919291840191610a31906123c1565b80601f0160208091040260200160405190810160405280929190818152602001828054610a5d906123c1565b8015610aaa5780601f10610a7f57610100808354040283529160200191610aaa565b820191906000526020600020905b815481529060010190602001808311610a8d57829003601f168201915b505050505081526020016002820154815260200160038201548152602001600482015481525050905092915050565b60095490565b60015490565b600b8054610af2906123c1565b80601f0160208091040260200160405190810160405280929190818152602001828054610b1e906123c1565b8015610b6b5780601f10610b4057610100808354040283529160200191610b6b565b820191906000526020600020905b815481529060010190602001808311610b4e57829003601f168201915b505050505081565b610b7b611ac6565b6001600160a01b03811660009081526006602052604081208054610b9e906123c1565b905011610bbd5760405162461bcd60e51b81526004016105ae906120e0565b806001600160a01b0316610bcf6116c1565b6001600160a01b03161415610bf65760405162461bcd60e51b81526004016105ae90612221565b600754600090610c08906001906123aa565b9050600060078281548110610c2d57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b038681168452600890925260408084205492909116808452922081905560078054929350909183919083908110610c8957634e487b7160e01b600052603260045260246000fd5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506007805480610cd657634e487b7160e01b600052603160045260246000fd5b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b03861682526006905260408120610d1991611c15565b6001600160a01b03841660009081526008602052604080822082905580516080810190915280610d47611b05565b6001600160a01b0390811682529687166020808301919091526000604080840182905242606094850152600980546001810182559252845160049092027f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af81018054938c166001600160a01b0319948516179055928501517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b08401805491909b16921691909117909855968201517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b188015501517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b29095019490945550505050565b600d8281548110610e5957600080fd5b906000526020600020018181548110610e7157600080fd5b6000918252602090912060059091020180546001820180546001600160a01b039092169450919250610ea2906123c1565b80601f0160208091040260200160405190810160405280929190818152602001828054610ece906123c1565b8015610f1b5780601f10610ef057610100808354040283529160200191610f1b565b820191906000526020600020905b815481529060010190602001808311610efe57829003601f168201915b5050505050908060020154908060030154908060040154905085565b60025490565b6060600b8054610f4c906123c1565b80601f0160208091040260200160405190810160405280929190818152602001828054610f78906123c1565b8015610fc55780601f10610f9a57610100808354040283529160200191610fc5565b820191906000526020600020905b815481529060010190602001808311610fa857829003601f168201915b5050505050905090565b60015481565b610fdd611ac6565b610fe76000611b09565b565b610ff1611ac6565b6001600160a01b0380821660009081526003602052604090205482911661102a5760405162461bcd60e51b81526004016105ae90611fca565b6001600160a01b038216600090815260046020526040812054600554909190611055906001906123aa565b905060006005828154811061107a57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b031680835260049091526040909120849055600580549192508291859081106110c857634e487b7160e01b600052603260045260246000fd5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600580548061111557634e487b7160e01b600052603160045260246000fd5b60008281526020808220830160001990810180546001600160a01b031990811690915593019093556001600160a01b039790971687526004825260408088208890556003909252908620805490911681556001019490945550505050565b61117b611ac6565b600081511161119c5760405162461bcd60e51b81526004016105ae906122d9565b6001600160a01b038216600090815260066020526040902080546111bf906123c1565b1590506111de5760405162461bcd60e51b81526004016105ae90612001565b6001600160a01b0382166000908152600660209081526040909120825161120792840190611b59565b50600780546001600160a01b0384166000818152600860205260408082208490556001840185559381527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68890920180546001600160a01b03191690911790558151608081019092529080611279611b05565b6001600160a01b0390811682529485166020808301919091526001604080840182905242606094850152600980549283018155600052845160049092027f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af81018054938a166001600160a01b0319948516179055928501517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b08401805491909916921691909117909655948201517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b186015501517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b2909301929092555050565b600c5460ff1681565b600c5460009060ff166113a75760405162461bcd60e51b81526004016105ae90612047565b6000600660006113b5611b05565b6001600160a01b03166001600160a01b0316815260200190815260200160002080546113e0906123c1565b9050116113ff5760405162461bcd60e51b81526004016105ae906121b3565b60006040518060a00160405280611414611b05565b6001600160a01b03168152602081018690526040810185905242606082015260006080909101819052600d80546001908101808355928290529293509161145a916123aa565b8154811061147857634e487b7160e01b600052603260045260246000fd5b600091825260208083209190910180546001808201835591845292829020845160059094020180546001600160a01b0319166001600160a01b039094169390931783558382015180518594936114d2938501920190611b59565b5060408201516002820155606082015160038201556080909101516004909101555050600d5492915050565b60086020526000908152604090205481565b611518611bdd565b600d5482106115395760405162461bcd60e51b81526004016105ae906120b4565b600d828154811061155a57634e487b7160e01b600052603260045260246000fd5b906000526020600020016001600d848154811061158757634e487b7160e01b600052603260045260246000fd5b60009182526020909120015461159d91906123aa565b815481106115bb57634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805160a0810190915260059092020180546001600160a01b0316825260018101805492939192918401916115fb906123c1565b80601f0160208091040260200160405190810160405280929190818152602001828054611627906123c1565b80156116745780601f1061164957610100808354040283529160200191611674565b820191906000526020600020905b81548152906001019060200180831161165757829003601f168201915b5050505050815260200160028201548152602001600382015481526020016004820154815250509050919050565b6116aa611ac6565b80516116bd90600b906020840190611b59565b5050565b6000546001600160a01b031690565b60066020526000908152604090208054610af2906123c1565b60006005828154811061170c57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031692915050565b6007818154811061173757600080fd5b6000918252602090912001546001600160a01b0316905081565b336000908152600360205260409020546001600160a01b03166117865760405162461bcd60e51b81526004016105ae906121ea565b6001600160a01b038082166000908152600360205260409020548291166117bf5760405162461bcd60e51b81526004016105ae90611fca565b81806001600160a01b03166117d26116c1565b6001600160a01b031614156117f95760405162461bcd60e51b81526004016105ae90612117565b505033600090815260036020526040902080546001600160a01b0319166001600160a01b039290921691909117815542600190910155565b60006007828154811061170c57634e487b7160e01b600052603260045260246000fd5b336000908152600360205260409020546001600160a01b03166118895760405162461bcd60e51b81526004016105ae906121ea565b6000805b60055481101561190d576000600582815481106118ba57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b039081168084526003909252604090922054909250163314156118fa57826118f6816123fc565b9350505b5080611905816123fc565b91505061188d565b506002548110156119305760405162461bcd60e51b81526004016105ae90612268565b61193933611b09565b61194233610fe9565b50565b600c5460ff1690565b60075490565b6009818154811061196457600080fd5b600091825260209091206004909102018054600182015460028301546003909301546001600160a01b0392831694509116919084565b600a8054610af2906123c1565b6060600a8054610f4c906123c1565b6119be611ac6565b80516116bd90600a906020840190611b59565b60055490565b600360205260009081526040902080546001909101546001600160a01b039091169082565b611a04611c51565b60098281548110611a2557634e487b7160e01b600052603260045260246000fd5b600091825260209182902060408051608081018252600490930290910180546001600160a01b0390811684526001820154169383019390935260028301549082015260039091015460608201529050919050565b611a81611ac6565b6001600160a01b038116611aa75760405162461bcd60e51b81526004016105ae9061206e565b61194281611b09565b600d5490565b6005818154811061173757600080fd5b611ace611b05565b6001600160a01b0316611adf6116c1565b6001600160a01b031614610fe75760405162461bcd60e51b81526004016105ae9061217e565b3390565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b828054611b65906123c1565b90600052602060002090601f016020900481019282611b875760008555611bcd565b82601f10611ba057805160ff1916838001178555611bcd565b82800160010185558215611bcd579182015b82811115611bcd578251825591602001919060010190611bb2565b50611bd9929150611c8b565b5090565b6040518060a0016040528060006001600160a01b03168152602001606081526020016000815260200160008152602001600081525090565b508054611c21906123c1565b6000825580601f10611c335750611942565b601f0160209004906000526020600020908101906119429190611c8b565b604051806080016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001600081525090565b5b80821115611bd95760008155600101611c8c565b80356001600160a01b03811681146105e757600080fd5b600082601f830112611cc7578081fd5b813567ffffffffffffffff80821115611ce257611ce261242d565b604051601f8301601f191681016020018281118282101715611d0657611d0661242d565b604052828152848301602001861015611d1d578384fd5b82602086016020830137918201602001929092529392505050565b600060208284031215611d49578081fd5b611d5282611ca0565b9392505050565b60008060408385031215611d6b578081fd5b611d7483611ca0565b9150602083013567ffffffffffffffff811115611d8f578182fd5b611d9b85828601611cb7565b9150509250929050565b600060208284031215611db6578081fd5b81358015158114611d52578182fd5b600060208284031215611dd6578081fd5b813567ffffffffffffffff811115611dec578182fd5b611df884828501611cb7565b949350505050565b60008060408385031215611e12578182fd5b823567ffffffffffffffff811115611e28578283fd5b611e3485828601611cb7565b95602094909401359450505050565b600060208284031215611e54578081fd5b5035919050565b600080600060608486031215611e6f578081fd5b83359250602084013567ffffffffffffffff811115611e8c578182fd5b611e9886828701611cb7565b925050604084013590509250925092565b60008060408385031215611ebb578182fd5b50508035926020909101359150565b60008151808452815b81811015611eef57602081850181015186830182015201611ed3565b81811115611f005782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b6001600160a01b038616815260a060208201819052600090611f7690830187611eca565b604083019590955250606081019290925260809091015292915050565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b600060208252611d526020830184611eca565b60208082526018908201527f41646472657373206e6f74204261636b7570204f776e65720000000000000000604082015260600190565b60208082526026908201527f456e637279707465642053656372657420656e74727920616c7265616479206560408201526578697374732160d01b606082015260800190565b6020808252600d908201526c4e6f74206564697461626c652160981b604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b602080825260129082015271526f77206f7574206f6620626f756e64732160701b604082015260600190565b6020808252601b908201527f4e6f20456e637279707465642053656372657420657869737473210000000000604082015260600190565b6020808252601c908201527f4f776e61626c653a2063616c6c657220697320746865206f776e657200000000604082015260600190565b60208082526016908201527556657273696f6e206f7574206f6620626f756e64732160501b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601b908201527f557365722063616e206e6f74206164642020726f772064617461210000000000604082015260600190565b6020808252601a908201527f53656e646572206973206e6f74204261636b7570204f776e6572000000000000604082015260600190565b60208082526027908201527f43616e206e6f742064656c657465206f776e65727320456e63727970746564206040820152665365637265742160c81b606082015260800190565b60208082526024908201527f4d696e696d756d206e756d626572206f6620766f746573206e6f7420726561636040820152636865642160e01b606082015260800190565b602080825260139082015272496e646578206f7574206f6620626f756e642160681b604082015260600190565b6020808252601a908201527f456e637279707465642053656372657420697320656d70747921000000000000604082015260600190565b602080825282516001600160a01b03168282015282015160a0604083015260009061233e60c0840182611eca565b90506040840151606084015260608401516080840152608084015160a08401528091505092915050565b81516001600160a01b03908116825260208084015190911690820152604080830151908201526060918201519181019190915260800190565b90815260200190565b6000828210156123bc576123bc612417565b500390565b6002810460018216806123d557607f821691505b602082108114156123f657634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561241057612410612417565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220fca16e209cb05a705d00c0dd8fc841a4edb71b5c8a664866a41803fbb959895064736f6c63430008000033';
export const secureBlockchainTable_SourceCode =
  '// File: @openzeppelin/contracts/utils/Context.sol\n\n// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n// File: @openzeppelin/contracts/access/Ownable.sol\n\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), "Ownable: new owner is the zero address");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// File: contracts/ownable-with-backup/OwnableWithBackup.sol\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module which provides a extended access control mechanism to the ownership of a contract.\n *\n * The owner has the same access as in the inherited Ownable contract.\n *\n * In addition the owner can register a set of backup owner that would be able to vote a new owner (one of them).\n * The main reason for that is a backup mechanism for the ownership. In case of a loss of the current owners access capabilities such as loss of the private key,\n * The backup owners can vote for a new owner and any of them would be able move the ownership the newly elected owner.\n *\n */\ncontract OwnableWithBackup is Ownable\n{\n\n    uint public maxMaxNumberOfBackupOwners = 5;\n    uint public minNumberOfVotes = 3;\n\n    struct BackupOwnerData {\n        address newOwner;\n        uint256 timestamp;\n    }\n\n    mapping(address => BackupOwnerData) public backupOwnerDataMap;\n\n    mapping(address => uint256) public backupOwnerIndicesMap;  // to keep track of a record\'s index in the array\n    address[] public backupOwnerAddressList;\n\n\n\n\n    modifier isNotOwner(address addr) {\n        require(owner() != addr, "Ownable: caller is the owner");\n        _;\n    }\n\n\n    modifier isBackupOwner(address addr) {\n        require(backupOwnerDataMap[addr].newOwner != address(0), "Address not Backup Owner");\n        _;\n    }\n\n    modifier onlyBackupOwner() {\n        require(backupOwnerDataMap[msg.sender].newOwner != address(0), "Sender is not Backup Owner");\n        _;\n    }\n\n    modifier isNotBackupOwner(address addr) {\n        require(backupOwnerDataMap[addr].newOwner == address(0), "Address not Backup Owner");\n        _;\n    }\n\n    // Setter for maxNumberOfBackupOwners\n    function setMaxNumberOfBackupOwners(uint newNumber) public onlyOwner {\n        maxMaxNumberOfBackupOwners = newNumber;\n    }\n\n    // Getter for maxNumberOfBackupOwners\n    function getMaxNumberOfBackupOwners() public view returns (uint) {\n        return maxMaxNumberOfBackupOwners;\n    }\n\n    // Setter for minNumberOfVotes\n    function setMinNumberOfVotes(uint newMinVotes) public onlyOwner {\n        minNumberOfVotes = newMinVotes;\n    }\n\n    // Getter for minNumberOfVotes\n    function getMinNumberOfVotes() public view returns (uint) {\n        return minNumberOfVotes;\n    }\n\n    function getBackupOwnerCount() public view returns (uint){\n        return backupOwnerAddressList.length;\n    }\n\n    function getBackupOwner(uint index) public view returns (address){\n        return backupOwnerAddressList[index];\n    }\n\n    function removeBackupOwner\n    (\n        address addr\n    )\n    public\n    onlyOwner\n    isBackupOwner(addr)\n    {\n        uint256 toBeDeletedIndex = backupOwnerIndicesMap[addr];\n\n        uint256 lastIndex = backupOwnerAddressList.length - 1;\n        address lastAddress = backupOwnerAddressList[lastIndex];\n\n        backupOwnerIndicesMap[lastAddress] = toBeDeletedIndex;\n\n        // swap\n        backupOwnerAddressList[toBeDeletedIndex] = lastAddress;\n\n        backupOwnerAddressList.pop();\n        delete backupOwnerIndicesMap[addr];\n        delete backupOwnerDataMap[addr];\n    }\n\n    /**\n * @dev Activate the sender as owner if he has the minimum number of votes.\n *\n *\n */\n    function activateOwnership()\n    external\n    onlyBackupOwner\n    {\n        uint counter = 0;\n        for (uint i = 0; i < backupOwnerAddressList.length; i++) {\n            address voter = backupOwnerAddressList[i];\n            if (backupOwnerDataMap[voter].newOwner == msg.sender) {\n                counter++;\n            }\n        }\n        require(counter >= minNumberOfVotes, "Minimum number of votes not reached!");\n        _transferOwnership(msg.sender);\n        removeBackupOwner(msg.sender);\n    }\n\n\n    function addBackupOwner\n    (\n        address newBackupOwner\n    )\n    external\n    onlyOwner\n    isNotOwner(newBackupOwner)\n    isNotBackupOwner(newBackupOwner)\n    {\n        backupOwnerAddressList.push(newBackupOwner);\n        backupOwnerDataMap[newBackupOwner] = BackupOwnerData({newOwner: owner(), timestamp: block.timestamp});\n        backupOwnerIndicesMap[newBackupOwner] = backupOwnerAddressList.length - 1;\n    }\n\n\n    function voteForNewOwner\n    (\n        address newOwner\n    )\n    external\n    onlyBackupOwner\n    isBackupOwner(newOwner)\n    isNotOwner(newOwner)\n    {\n        backupOwnerDataMap[msg.sender].newOwner = newOwner;\n        backupOwnerDataMap[msg.sender].timestamp = block.timestamp;\n    }\n\n\n}\n\n// File: contracts/secure-blockchain-table/SecureBlockchainTable.sol\n\npragma solidity ^0.8.0;\n\n// TODO: historize userList (DONE)\n// TODO: test add/remove/re-add userList (DONE)\n// TODO: add get/count methods for users (DONE)\n// TODO: add check for addData (only user with enc)\n\ncontract SecureBlockchainTable is OwnableWithBackup\n{\n\n    // User and Encrypted Secret Management\n    mapping(address => string) public userEncSecretMap;\n    address[] public userList;\n    mapping(address => uint) public userIndexMap;\n\n    // Log of User Management\n    struct UserActionLog {\n        address owner;\n        address userAddress;\n        uint action;\n        uint created;\n    }\n\n    UserActionLog[] public userHistory;\n\n    constructor(string memory _encSecret){\n        editable = true;\n        setEncSecret(_msgSender(), _encSecret);\n    }\n\n    function setEncSecret(address _user, string memory _encSecret) onlyOwner public {\n        require(bytes(_encSecret).length > 0, "Encrypted Secret is empty!");\n        require(bytes(userEncSecretMap[_user]).length == 0, "Encrypted Secret entry already exists!");\n        userEncSecretMap[_user] = _encSecret;\n        userIndexMap[_user] = userList.length;\n        userList.push(_user);\n        UserActionLog memory _userHistory = UserActionLog(_msgSender(), _user, 1, block.timestamp);\n        userHistory.push(_userHistory);\n    }\n\n    function removeEncSecret(address _user) onlyOwner external {\n        require(bytes(userEncSecretMap[_user]).length > 0, "No Encrypted Secret exists!");\n        require(owner() != _user, "Can not delete owners Encrypted Secret!");\n\n        uint lastUserIndex = userList.length - 1;\n        address lastUserAddress = userList[lastUserIndex];\n        uint indexToDelete = userIndexMap[_user];\n\n        userIndexMap[lastUserAddress] = indexToDelete;\n        userList[indexToDelete] = lastUserAddress;\n\n        userList.pop();\n        delete userEncSecretMap[_user];\n        delete userIndexMap[_user];\n        UserActionLog memory _userHistory = UserActionLog(_msgSender(), _user, 0, block.timestamp);\n        userHistory.push(_userHistory);\n    }\n\n    function getUserCount() external view returns (uint) {\n        return userList.length;\n    }\n\n\n    function getUser(uint _index) external view returns (address) {\n        return userList[_index];\n    }\n\n\n    function getUserHistoryCount() external view returns (uint) {\n        return userHistory.length;\n    }\n\n    function getUserHistory(uint _index) external view returns (UserActionLog memory) {\n        return userHistory[_index];\n    }\n\n\n    string public metaData;\n\n    function setMetaData(string memory _metaData) onlyOwner external {\n        metaData = _metaData;\n    }\n\n    function getMetaData() external view returns (string memory) {\n        return metaData;\n    }\n\n\n    string public initialData;\n\n    function setInitialData(string memory _initialData) onlyOwner external {\n        initialData = _initialData;\n    }\n\n    function getInitialData() external view returns (string memory) {\n        return initialData;\n    }\n\n    bool public editable;\n\n    function setEditable(bool _editable) onlyOwner external {\n        editable = _editable;\n    }\n\n\n    function isEditable() public view returns (bool) {\n        return editable;\n    }\n\n\n    struct DataRow {\n        address userAddress;\n        string content;\n        uint status;\n        uint created;\n        uint version;\n    }\n\n    DataRow[][] public dataRowList;\n\n    function getDataRowCount() external view returns (uint) {\n        return dataRowList.length;\n    }\n\n    function getDataRowVersionCount(uint _rowIndex) external view returns (uint){\n        require(dataRowList.length > _rowIndex, "Row out of bounds!");\n        return dataRowList[_rowIndex].length;\n    }\n\n\n    function getLatestDataRowVersion(uint _rowIndex) external view returns (DataRow memory){\n        require(dataRowList.length > _rowIndex, "Row out of bounds!");\n        return dataRowList[_rowIndex][dataRowList[_rowIndex].length - 1];\n    }\n\n\n    function getDataRow(uint _rowIndex, uint _version) external view returns (DataRow memory){\n        require(dataRowList.length > _rowIndex, "Row out of bounds!");\n        require(dataRowList[_rowIndex].length > _version, "Version out of bounds!");\n        return dataRowList[_rowIndex][_version];\n    }\n\n\n    function setDataRow(uint _rowIndex, string memory _content, uint _status) external {\n        require(editable, "Not editable!");\n        require(_rowIndex >= 0 && _rowIndex < dataRowList.length, "Index out of bound!");\n        require(bytes(userEncSecretMap[_msgSender()]).length > 0, "User can not add  row data!");\n        DataRow memory _dataRowEntry = DataRow(_msgSender(), _content, _status, block.timestamp, dataRowList[_rowIndex].length);\n        if (_rowIndex < dataRowList.length) {\n            dataRowList[_rowIndex].push(_dataRowEntry);\n        }\n    }\n\n\n    function addDataRow(string memory _content, uint _status) external returns (uint ) {\n        require(editable, "Not editable!");\n        require(bytes(userEncSecretMap[_msgSender()]).length > 0, "User can not add  row data!");\n        DataRow memory _dataRowEntry = DataRow(_msgSender(), _content, _status, block.timestamp,0);\n        dataRowList.push();\n        dataRowList[dataRowList.length - 1].push(_dataRowEntry);\n        return dataRowList.length;\n    }\n\n\n}\n';

export const secureBlockchainTable_Version = 'solc-emscripten-wasm32-v0.8.0+commit.c7dfd78e.js';
