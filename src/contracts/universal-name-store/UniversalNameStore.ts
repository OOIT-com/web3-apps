
export const universalNameStoreAbi         = [{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"oldFee","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"newFee","type":"uint256"}],"name":"FeeChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"string","name":"name","type":"string"}],"name":"NameDeleted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"string","name":"name","type":"string"}],"name":"NameMinted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"string","name":"name","type":"string"},{"indexed":true,"internalType":"string","name":"key","type":"string"},{"indexed":false,"internalType":"string","name":"value","type":"string"}],"name":"NameValueSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"string","name":"name","type":"string"},{"indexed":true,"internalType":"string","name":"key","type":"string"},{"indexed":false,"internalType":"string","name":"value","type":"string"}],"name":"ValueRemoved","type":"event"},{"inputs":[],"name":"ADDRESS_HAS_NAME","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ADDRESS_IS_A_CONTRACT","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ADDRESS_IS_NOT_A_CONTRACT","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"KEY_DOES_NOT_EXIST","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"NAME_DOES_NOT_EXIST","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"NAME_IS_NOT_TAKEN","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"NAME_IS_TAKEN","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"NEW_ADDRESS_HAS_ALREADY_A_NAME","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"NOT_ALLOWED_CHARS","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"NOT_ENOUGH_BALANCE","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"NOT_ENOUGH_MONEY_SENT","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"NOT_OWNER_OF_NAME","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"NO_VALUE_EXISTS","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"VALUE_IS_EMPTY","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"activateOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newBackupOwner","type":"address"}],"name":"addBackupOwner","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"addressList","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"addressToIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"addressToKeyArray","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"string","name":"","type":"string"}],"name":"addressToKeyToIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"string","name":"","type":"string"}],"name":"addressToKeyToValue","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"addressToName","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"backupOwnerAddressList","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"backupOwnerDataMap","outputs":[{"internalType":"address","name":"newOwner","type":"address"},{"internalType":"uint256","name":"timestamp","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"backupOwnerIndicesMap","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_addr","type":"address"}],"name":"checkNameOwnership","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"input","type":"string"}],"name":"checkValidString","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"string","name":"_name","type":"string"}],"name":"deleteName","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"feeAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_index","type":"uint256"}],"name":"getAddressByIndex","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"_name","type":"string"}],"name":"getAddressByName","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getAddressCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getBackupOwner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getBackupOwnerCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_backupOwnerAddress","type":"address"}],"name":"getBackupOwnerData","outputs":[{"components":[{"internalType":"address","name":"newOwner","type":"address"},{"internalType":"uint256","name":"timestamp","type":"uint256"}],"internalType":"struct OwnableWithBackup.BackupOwnerData","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"_name","type":"string"},{"internalType":"uint256","name":"_index","type":"uint256"}],"name":"getKey","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_addr","type":"address"},{"internalType":"uint256","name":"_index","type":"uint256"}],"name":"getKeyByAddress","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"_name","type":"string"}],"name":"getKeyCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_addr","type":"address"}],"name":"getKeyCountByAddress","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getMaxNumberOfBackupOwners","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getMinNumberOfVotes","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_addr","type":"address"}],"name":"getName","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_addr","type":"address"}],"name":"getOwnership","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"_name","type":"string"},{"internalType":"string","name":"_key","type":"string"}],"name":"getValue","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_addr","type":"address"},{"internalType":"string","name":"_key","type":"string"}],"name":"getValueByAddress","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"maxMaxNumberOfBackupOwners","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"minNumberOfVotes","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"nameOwnership","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"","type":"string"}],"name":"nameToAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"_name","type":"string"},{"internalType":"address","name":"_newAddress","type":"address"}],"name":"reassignName","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"string","name":"_name","type":"string"},{"internalType":"address","name":"_addr","type":"address"}],"name":"registerContractName","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"string","name":"_name","type":"string"}],"name":"registerMyName","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"addr","type":"address"}],"name":"removeBackupOwner","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"_name","type":"string"},{"internalType":"string","name":"_key","type":"string"}],"name":"removeValue","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_feeAmount","type":"uint256"}],"name":"setFee","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"newNumber","type":"uint256"}],"name":"setMaxNumberOfBackupOwners","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"newMinVotes","type":"uint256"}],"name":"setMinNumberOfVotes","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"_name","type":"string"},{"internalType":"string","name":"_key","type":"string"},{"internalType":"string","name":"_value","type":"string"}],"name":"setValue","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"voteForNewOwner","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}] as const;
export const universalNameStoreBytecode    = "60806040526005600155600280553480156200001a57600080fd5b506200002f6200002962000035565b62000039565b62000089565b3390565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61376e80620000996000396000f3fe6080604052600436106103c35760003560e01c80637c6813fe116101f2578063cdbb02af1161010d578063e3e692cb116100a0578063f667e0aa1161006f578063f667e0aa14610a4c578063f7965e0614610a6c578063fa2ca4e014610a8c578063fd2939ad14610aa1576103c3565b8063e3e692cb146109f1578063f2aa6d1b14610a04578063f2fde38b14610a19578063f5e1700414610a39576103c3565b8063dfee322e116100dc578063dfee322e14610963578063e10b41de14610991578063e1b119cc146109b1578063e2a04b62146109d1576103c3565b8063cdbb02af14610904578063ce10cf8814610919578063ced72f8714610939578063da140c851461094e576103c3565b8063a165df1611610185578063b4152a7a11610154578063b4152a7a1461088f578063b810fb43146108af578063ba725df7146108cf578063bda68b76146108e4576103c3565b8063a165df1614610832578063a66c94e914610847578063af5cb25b14610867578063b11d0f8b1461087a576103c3565b80638da5cb5b116101c15780638da5cb5b146107bd578063946c70d7146107d2578063972368ac146107f25780639a65ddec14610812576103c3565b80637c6813fe1461075357806383cacc11146107735780638cab1f28146107885780638d2e50351461079d576103c3565b80634c8c8dec116102e257806369fe0e2d11610275578063715018a611610244578063715018a6146106dc57806372d05f6d146106f157806372ebe427146107115780637abe2e8c1461073e576103c3565b806369fe0e2d146106725780636ab52187146106925780636e7ba717146106b25780636f895b83146106c7576103c3565b80635fd4b08a116102b15780635fd4b08a14610613578063617468be1461063357806368b683321461064857806369e154041461065d576103c3565b80634c8c8dec146105b8578063533b7d85146105d857806353a98ea9146105ed5780635606a77714610600576103c3565b8063266316db1161035a5780632e1a7d4d116103295780632e1a7d4d14610541578063334d338f1461056157806339a36b8e1461058e57806343dc567e146105a3576103c3565b8063266316db146104c15780632b681a54146104e15780632bcba828146105015780632d5c9c9914610521576103c3565b80630fc1b08b116103965780630fc1b08b1461044a578063134148841461045f578063186f93fc146104815780631bd807d0146104a1576103c3565b806301e4a905146103c8578063024ef7d9146103f357806302e9ad4d1461040857806308d88aad1461041d575b600080fd5b3480156103d457600080fd5b506103dd610ac1565b6040516103ea919061344e565b60405180910390f35b3480156103ff57600080fd5b506103dd610af3565b34801561041457600080fd5b506103dd610b25565b34801561042957600080fd5b5061043d6104383660046131a2565b610b4f565b6040516103ea9190613416565b61045d610458366004613280565b610b75565b005b34801561046b57600080fd5b50610474610df5565b6040516103ea919061363a565b34801561048d57600080fd5b5061047461049c36600461310c565b610dfb565b3480156104ad57600080fd5b506103dd6104bc366004613179565b610e0d565b3480156104cd57600080fd5b5061045d6104dc366004613347565b610ee4565b3480156104ed57600080fd5b5061043d6104fc36600461310c565b610ef1565b34801561050d57600080fd5b5061045d61051c366004613347565b610f12565b34801561052d57600080fd5b5061045d61053c36600461310c565b610f1f565b34801561054d57600080fd5b5061045d61055c366004613347565b611096565b34801561056d57600080fd5b5061058161057c36600461310c565b611135565b6040516103ea9190613443565b34801561059a57600080fd5b506103dd611187565b3480156105af57600080fd5b506103dd6111b9565b3480156105c457600080fd5b506104746105d336600461310c565b6111f2565b3480156105e457600080fd5b5061047461120d565b61045d6105fb3660046131a2565b611213565b61045d61060e3660046131a2565b611495565b34801561061f57600080fd5b506103dd61062e36600461310c565b6114a9565b34801561063f57600080fd5b506103dd611555565b34801561065457600080fd5b50610474611589565b34801561066957600080fd5b5061047461158f565b34801561067e57600080fd5b5061045d61068d366004613347565b611595565b34801561069e57600080fd5b506104746106ad3660046131a2565b6115d6565b3480156106be57600080fd5b506103dd611661565b3480156106d357600080fd5b5061047461168f565b3480156106e857600080fd5b5061045d611695565b3480156106fd57600080fd5b5061045d61070c36600461310c565b6116a9565b34801561071d57600080fd5b5061073161072c36600461310c565b611833565b6040516103ea919061361a565b34801561074a57600080fd5b506103dd6118ad565b34801561075f57600080fd5b5061043d61076e36600461310c565b6118d4565b34801561077f57600080fd5b506103dd6118ef565b34801561079457600080fd5b506103dd611928565b3480156107a957600080fd5b506103dd6107b836600461312d565b611957565b3480156107c957600080fd5b5061043d611a0d565b3480156107de57600080fd5b506103dd6107ed366004613304565b611a1c565b3480156107fe57600080fd5b5061043d61080d366004613347565b611b5e565b34801561081e57600080fd5b5061043d61082d3660046131a2565b611b9c565b34801561083e57600080fd5b506103dd611c27565b34801561085357600080fd5b5061045d61086236600461310c565b611c53565b61045d6108753660046131dd565b611d33565b34801561088657600080fd5b5061045d611dc0565b34801561089b57600080fd5b506103dd6108aa366004613229565b611eae565b3480156108bb57600080fd5b5061043d6108ca366004613347565b611fe6565b3480156108db57600080fd5b506103dd612010565b3480156108f057600080fd5b506105816108ff3660046131a2565b612049565b34801561091057600080fd5b506104746121a8565b34801561092557600080fd5b5061043d610934366004613347565b6121ae565b34801561094557600080fd5b506104746121d1565b34801561095a57600080fd5b506104746121d7565b34801561096f57600080fd5b5061098361097e36600461310c565b6121dd565b6040516103ea92919061342a565b34801561099d57600080fd5b506103dd6109ac366004613179565b612202565b3480156109bd57600080fd5b506103dd6109cc36600461312d565b61223a565b3480156109dd57600080fd5b506103dd6109ec36600461310c565b612308565b61045d6109ff366004613229565b612321565b348015610a1057600080fd5b506103dd6127ff565b348015610a2557600080fd5b5061045d610a3436600461310c565b61282a565b61045d610a473660046131dd565b612861565b348015610a5857600080fd5b50610474610a6736600461310c565b612a4a565b348015610a7857600080fd5b50610474610a8736600461312d565b612a5c565b348015610a9857600080fd5b506103dd612a8a565b348015610aad57600080fd5b5061043d610abc366004613347565b612ab9565b604051806040016040528060168152602001754e6f74206f776e6572206f6620746865206e616d652160501b81525081565b604051806040016040528060168152602001754e6f7420656e6f756768206d6f6e65792073656e742160501b81525081565b6040518060400160405280600e81526020016d4e616d652069732074616b656e2160901b81525081565b80516020818301810180516007825292820191909301209152546001600160a01b031681565b6000600784604051610b87919061335f565b9081526040519081900360200190205482516001600160a01b039091169150610bda57610bda6040518060400160405280600f81526020016e56616c756520697320656d7074792160881b815250612ac9565b6001600160a01b038116610c1457610c14604051806040016040528060148152602001600080516020613719833981519152815250612ac9565b610c1d81611135565b610c5857610c58604051806040016040528060168152602001754e6f74206f776e6572206f6620746865206e616d652160501b815250612ac9565b610c60612b10565b6001600160a01b0381166000908152600c6020526040908190209051610c8790859061335f565b90815260200160405180910390208054610ca090613696565b15159050610d20576001600160a01b0381166000908152600d6020908152604082208054600181018255908352918190208551610ce39291840191870190612f4d565b506001600160a01b0382166000908152600e6020526040908190209051829190610d0e90879061335f565b90815260405190819003602001902055505b6001600160a01b0381166000908152600c6020526040908190209051839190610d4a90869061335f565b90815260200160405180910390209080519060200190610d6b929190612f4d565b50610d74612b51565b82604051610d82919061335f565b604080519182900382206001600160a01b03841660009081526008602052919091209091610db0919061337b565b60405180910390207f68cf9f71aeb1d1459da50c98c483e5741a95eaa9e4c52a4bf57097fb6606234184604051610de7919061344e565b60405180910390a350505050565b60025481565b60046020526000908152604090205481565b6001600160a01b0382166000908152600d6020526040902080546060919083908110610e4957634e487b7160e01b600052603260045260246000fd5b906000526020600020018054610e5e90613696565b80601f0160208091040260200160405190810160405280929190818152602001828054610e8a90613696565b8015610ed75780601f10610eac57610100808354040283529160200191610ed7565b820191906000526020600020905b815481529060010190602001808311610eba57829003601f168201915b5050505050905092915050565b610eec612b96565b600155565b6001600160a01b038082166000908152600b6020526040902054165b919050565b610f1a612b96565b600255565b610f27612b96565b80806001600160a01b0316610f3a611a0d565b6001600160a01b03161415610f6a5760405162461bcd60e51b8152600401610f6190613533565b60405180910390fd5b6001600160a01b0380831660009081526003602052604090205483911615610fa45760405162461bcd60e51b8152600401610f6190613481565b60015460055410610fc75760405162461bcd60e51b8152600401610f61906134fe565b600580546001810182556000919091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180546001600160a01b0319166001600160a01b0385161790556040805180820190915280611025611a0d565b6001600160a01b0390811682524260209283015285811660009081526003835260409020835181546001600160a01b0319169216919091178155910151600191820155600554611075919061364f565b6001600160a01b039093166000908152600460205260409020929092555050565b61109e612b96565b80471015604051806040016040528060138152602001724e6f7420656e6f7567682062616c616e63652160681b815250906110ec5760405162461bcd60e51b8152600401610f61919061344e565b5060006110f7612bd5565b6040519091506001600160a01b0382169083156108fc029084906000818181858888f19350505050158015611130573d6000803e3d6000fd5b505050565b600061113f612bd5565b6001600160a01b0316826001600160a01b031614806111815750611161612bd5565b6001600160a01b038381166000908152600b602052604090205481169116145b92915050565b6040518060400160405280601681526020017541646472657373206973206120636f6e74726163742160501b81525081565b6040518060400160405280601f81526020017f4e657720616464726573732068617320616c72656164792061206e616d65210081525081565b6001600160a01b03166000908152600d602052604090205490565b60015490565b6000600782604051611225919061335f565b908152604051908190036020019020546001600160a01b031690508061127157611271604051806040016040528060148152602001600080516020613719833981519152815250612ac9565b61127a81611135565b6112b5576112b5604051806040016040528060168152602001754e6f74206f776e6572206f6620746865206e616d652160501b815250612ac9565b6112bd612b10565b6001600160a01b0381166000908152600a6020526040812054600980549192916112e99060019061364f565b8154811061130757634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b0316808352600a90915260409091208390556009805491925082918490811061135557634e487b7160e01b600052603260045260246000fd5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060098054806113a257634e487b7160e01b600052603160045260246000fd5b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b0385168252600a81526040808320839055600890915281206113f091612fd1565b600784604051611400919061335f565b908152604080516020928190038301902080546001600160a01b03191690556001600160a01b0385166000908152600d909252812061143e9161300d565b611446612b51565b83604051611454919061335f565b604051908190038120906001600160a01b038516907fb60d5a65fa1b58c308e5b462615cefa31ae76a246c56092fd60106a1d288a6fd90600090a350505050565b6114a6816114a1612bd5565b612bd9565b50565b6001600160a01b03811660009081526008602052604090208054606091906114d090613696565b80601f01602080910402602001604051908101604052809291908181526020018280546114fc90613696565b80156115495780601f1061151e57610100808354040283529160200191611549565b820191906000526020600020905b81548152906001019060200180831161152c57829003601f168201915b50505050509050919050565b6040518060400160405280601881526020017743686172616374657273206e6f742061636365707465642160401b81525081565b60025490565b60065481565b61159d612b96565b6006805490829055604051829082907f5fc463da23c1b063e66f9e352006a7fbe8db7223c455dc429e881a2dfe2f94f190600090a35050565b6000806007836040516115e9919061335f565b9081526040805191829003602090810183205483830190925260148352600080516020613719833981519152908301526001600160a01b03169150816116425760405162461bcd60e51b8152600401610f61919061344e565b506001600160a01b03166000908152600d602052604090205492915050565b604051806040016040528060128152602001714e616d65206973206e6f742074616b656e2160701b81525081565b60015481565b61169d612b96565b6116a76000612efd565b565b6116b1612b96565b6001600160a01b038082166000908152600360205260409020548291166116ea5760405162461bcd60e51b8152600401610f6190613481565b6001600160a01b0382166000908152600460205260408120546005549091906117159060019061364f565b905060006005828154811061173a57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b0316808352600490915260409091208490556005805491925082918590811061178857634e487b7160e01b600052603260045260246000fd5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060058054806117d557634e487b7160e01b600052603160045260246000fd5b60008281526020808220830160001990810180546001600160a01b031990811690915593019093556001600160a01b039790971687526004825260408088208890556003909252908620805490911681556001019490945550505050565b61183b61302b565b336000908152600360205260409020546001600160a01b03166118705760405162461bcd60e51b8152600401610f619061359f565b506001600160a01b039081166000908152600360209081526040918290208251808401909352805490931682526001909201549181019190915290565b60405180604001604052806014815260200160008051602061371983398151915281525081565b600b602052600090815260409020546001600160a01b031681565b6040518060400160405280601a81526020017f41646472657373206973206e6f74206120636f6e74726163742100000000000081525081565b604051806040016040528060138152602001724e6f7420656e6f7567682062616c616e63652160681b81525081565b600c60209081526000928352604090922081518083018401805192815290840192909301919091209152805461198c90613696565b80601f01602080910402602001604051908101604052809291908181526020018280546119b890613696565b8015611a055780601f106119da57610100808354040283529160200191611a05565b820191906000526020600020905b8154815290600101906020018083116119e857829003601f168201915b505050505081565b6000546001600160a01b031690565b60606000600784604051611a30919061335f565b9081526040805191829003602090810183205483830190925260148352600080516020613719833981519152908301526001600160a01b0316915081611a895760405162461bcd60e51b8152600401610f61919061344e565b506001600160a01b0381166000908152600d60205260409020805484908110611ac257634e487b7160e01b600052603260045260246000fd5b906000526020600020018054611ad790613696565b80601f0160208091040260200160405190810160405280929190818152602001828054611b0390613696565b8015611b505780601f10611b2557610100808354040283529160200191611b50565b820191906000526020600020905b815481529060010190602001808311611b3357829003601f168201915b505050505091505092915050565b600060058281548110611b8157634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031692915050565b6000611ba782612049565b6040518060400160405280601881526020017743686172616374657273206e6f742061636365707465642160401b81525090611bf65760405162461bcd60e51b8152600401610f61919061344e565b50600782604051611c07919061335f565b908152604051908190036020019020546001600160a01b03169050919050565b6040518060400160405280601081526020016f4e6f2076616c7565206578697374732160801b81525081565b336000908152600360205260409020546001600160a01b0316611c885760405162461bcd60e51b8152600401610f619061359f565b6001600160a01b03808216600090815260036020526040902054829116611cc15760405162461bcd60e51b8152600401610f6190613481565b81806001600160a01b0316611cd4611a0d565b6001600160a01b03161415611cfb5760405162461bcd60e51b8152600401610f6190613533565b505033600090815260036020526040902080546001600160a01b0319166001600160a01b039290921691909117815542600190910155565b6000816001600160a01b0316803b806020016040519081016040528181526000908060200190933c51116040518060400160405280601a81526020017f41646472657373206973206e6f74206120636f6e74726163742100000000000081525090611db15760405162461bcd60e51b8152600401610f61919061344e565b50611dbc8282612bd9565b5050565b336000908152600360205260409020546001600160a01b0316611df55760405162461bcd60e51b8152600401610f619061359f565b6000805b600554811015611e7957600060058281548110611e2657634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b03908116808452600390925260409092205490925016331415611e665782611e62816136d1565b9350505b5080611e71816136d1565b915050611df9565b50600254811015611e9c5760405162461bcd60e51b8152600401610f61906135d6565b611ea533612efd565b6114a6336116a9565b60606000600784604051611ec2919061335f565b9081526040805191829003602090810183205483830190925260148352600080516020613719833981519152908301526001600160a01b0316915081611f1b5760405162461bcd60e51b8152600401610f61919061344e565b506001600160a01b0381166000908152600c6020526040908190209051611f4390859061335f565b90815260200160405180910390208054611f5c90613696565b6040805180820190915260138152724b657920646f6573206e6f742065786973742160681b60208201529150611fa55760405162461bcd60e51b8152600401610f61919061344e565b506001600160a01b0381166000908152600c6020526040908190209051611fcd90859061335f565b90815260200160405180910390208054611ad790613696565b60098181548110611ff657600080fd5b6000918252602090912001546001600160a01b0316905081565b6040518060400160405280601b81526020017f4164647265737320616c7265616479206861732061206e616d6521000000000081525081565b600081815b815181101561219e57600082828151811061207957634e487b7160e01b600052603260045260246000fd5b01602001516001600160f81b03191690508115806120a35750600183516120a0919061364f565b82145b80156120d35750601760f91b6001600160f81b0319821614806120d35750602d60f81b6001600160f81b03198216145b156120e45760009350505050610f0d565b604160f81b6001600160f81b03198216108015906121105750602d60f91b6001600160f81b0319821611155b1580156121465750600360fc1b6001600160f81b03198216108015906121445750603960f81b6001600160f81b0319821611155b155b80156121605750602d60f81b6001600160f81b0319821614155b801561217a5750601760f91b6001600160f81b0319821614155b1561218b5760009350505050610f0d565b5080612196816136d1565b91505061204e565b5060019392505050565b60095490565b600060098281548110611b8157634e487b7160e01b600052603260045260246000fd5b60065490565b60055490565b600360205260009081526040902080546001909101546001600160a01b039091169082565b600d602052816000526040600020818154811061221e57600080fd5b9060005260206000200160009150915050805461198c90613696565b6001600160a01b0382166000908152600c60205260409081902090516060919061226590849061335f565b9081526020016040518091039020805461227e90613696565b6040805180820190915260138152724b657920646f6573206e6f742065786973742160681b602082015291506122c75760405162461bcd60e51b8152600401610f61919061344e565b506001600160a01b0383166000908152600c60205260409081902090516122ef90849061335f565b90815260200160405180910390208054610e5e90613696565b6008602052600090815260409020805461198c90613696565b6000600783604051612333919061335f565b908152604051908190036020019020546001600160a01b031690508061237f5761237f604051806040016040528060148152602001600080516020613719833981519152815250612ac9565b61238881611135565b6123c3576123c3604051806040016040528060168152602001754e6f74206f776e6572206f6620746865206e616d652160501b815250612ac9565b6001600160a01b0381166000908152600c60205260409081902090516123ea90849061335f565b9081526020016040518091039020805461240390613696565b1515905061243c5761243c6040518060400160405280601081526020016f4e6f2076616c7565206578697374732160801b815250612ac9565b612444612b10565b6001600160a01b0381166000908152600c6020526040808220905161246a90859061335f565b9081526020016040518091039020805461248390613696565b80601f01602080910402602001604051908101604052809291908181526020018280546124af90613696565b80156124fc5780601f106124d1576101008083540402835291602001916124fc565b820191906000526020600020905b8154815290600101906020018083116124df57829003601f168201915b5050506001600160a01b0385166000908152600d6020908152604080832054600e90925280832090519596509094919350915061253a90879061335f565b9081526040805160209281900383019020546001600160a01b0387166000908152600d90935290822090925061257160018561364f565b8154811061258f57634e487b7160e01b600052603260045260246000fd5b9060005260206000200180546125a490613696565b80601f01602080910402602001604051908101604052809291908181526020018280546125d090613696565b801561261d5780601f106125f25761010080835404028352916020019161261d565b820191906000526020600020905b81548152906001019060200180831161260057829003601f168201915b5050505050905080600d6000876001600160a01b03166001600160a01b03168152602001908152602001600020838154811061266957634e487b7160e01b600052603260045260246000fd5b906000526020600020019080519060200190612686929190612f4d565b506001600160a01b0385166000908152600d602052604090208054806126bc57634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160006126d89190612fd1565b90556001600160a01b0385166000908152600e602052604090819020905183919061270490849061335f565b9081526040805160209281900383018120939093556001600160a01b0388166000908152600e90925290209061273b90889061335f565b9081526040805191829003602090810183206000908190556001600160a01b0389168152600c909152209061277190889061335f565b9081526020016040518091039020600061278b9190612fd1565b612793612b51565b856040516127a1919061335f565b6040518091039020876040516127b7919061335f565b60405180910390207f509b7169cd2285251a8c265bc26d21f0313f2b0a37002191da568e00884aeb0c866040516127ee919061344e565b60405180910390a350505050505050565b6040518060400160405280600f81526020016e56616c756520697320656d7074792160881b81525081565b612832612b96565b6001600160a01b0381166128585760405162461bcd60e51b8152600401610f61906134b8565b6114a681612efd565b6000600783604051612873919061335f565b908152604051908190036020019020546001600160a01b03169050806128bf576128bf604051806040016040528060148152602001600080516020613719833981519152815250612ac9565b6128c881611135565b61290357612903604051806040016040528060168152602001754e6f74206f776e6572206f6620746865206e616d652160501b815250612ac9565b6001600160a01b0382166000908152600860205260408120805461292690613696565b9050111561296c5761296c6040518060400160405280601f81526020017f4e657720616464726573732068617320616c72656164792061206e616d652100815250612ac9565b612974612b10565b81600784604051612985919061335f565b908152604080516020928190038301902080546001600160a01b0319166001600160a01b03948516179055918316600090815260089091529081206129c991612fd1565b6001600160a01b038216600090815260086020908152604090912084516129f292860190612f4d565b506001600160a01b038181166000908152600b60205260409020541615612a42576001600160a01b038181166000908152600b6020526040902080546001600160a01b0319169184169190911790555b611130612b51565b600a6020526000908152604090205481565b600e602090815260009283526040909220815180830184018051928152908401929093019190912091525481565b604051806040016040528060138152602001724b657920646f6573206e6f742065786973742160681b81525081565b60058181548110611ff657600080fd5b60405133903480156108fc02916000818181858888f19350505050158015612af5573d6000803e3d6000fd5b508060405162461bcd60e51b8152600401610f61919061344e565b6006543410156116a7576116a7604051806040016040528060168152602001754e6f7420656e6f756768206d6f6e65792073656e742160501b815250612ac9565b6006543411156116a75760065433906108fc90612b6e903461364f565b6040518115909202916000818181858888f193505050501580156114a6573d6000803e3d6000fd5b612b9e612bd5565b6001600160a01b0316612baf611a0d565b6001600160a01b0316146116a75760405162461bcd60e51b8152600401610f619061356a565b3390565b60006001600160a01b0316600783604051612bf4919061335f565b908152604051908190036020019020546001600160a01b031614612c4157612c416040518060400160405280600e81526020016d4e616d652069732074616b656e2160901b815250612ac9565b806001600160a01b0316600783604051612c5b919061335f565b908152604051908190036020019020546001600160a01b03161415612cb857612cb86040518060400160405280601b81526020017f4164647265737320616c7265616479206861732061206e616d65210000000000815250612ac9565b6001600160a01b03811660009081526008602052604081208054612cdb90613696565b90501115612d2157612d216040518060400160405280601b81526020017f4164647265737320616c7265616479206861732061206e616d65210000000000815250612ac9565b612d2a82612049565b612d6757612d676040518060400160405280601881526020017743686172616374657273206e6f742061636365707465642160401b815250612ac9565b612d6f612b10565b6001600160a01b03811660009081526008602090815260409091208351612d9892850190612f4d565b50600980546001808201835560008390527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af90910180546001600160a01b0319166001600160a01b0385161790559054612df2919061364f565b6001600160a01b0382166000908152600a60205260409081902091909155518190600790612e2190859061335f565b90815260405190819003602001902080546001600160a01b03929092166001600160a01b0319909216919091179055612e58612bd5565b6001600160a01b0316816001600160a01b031614612ea857612e78612bd5565b6001600160a01b038281166000908152600b6020526040902080546001600160a01b031916929091169190911790555b612eb0612b51565b81604051612ebe919061335f565b604051908190038120906001600160a01b038316907fbcd06440f51496ea70f60c38ecd6dbd489c83a7d0cc29d6275399d3acf3d1eba90600090a35050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b828054612f5990613696565b90600052602060002090601f016020900481019282612f7b5760008555612fc1565b82601f10612f9457805160ff1916838001178555612fc1565b82800160010185558215612fc1579182015b82811115612fc1578251825591602001919060010190612fa6565b50612fcd929150613042565b5090565b508054612fdd90613696565b6000825580601f10612fef57506114a6565b601f0160209004906000526020600020908101906114a69190613042565b50805460008255906000526020600020908101906114a69190613057565b604080518082019091526000808252602082015290565b5b80821115612fcd5760008155600101613043565b80821115612fcd57600061306b8282612fd1565b50600101613057565b80356001600160a01b0381168114610f0d57600080fd5b600082601f83011261309b578081fd5b813567ffffffffffffffff808211156130b6576130b6613702565b604051601f8301601f1916810160200182811182821017156130da576130da613702565b6040528281528483016020018610156130f1578384fd5b82602086016020830137918201602001929092529392505050565b60006020828403121561311d578081fd5b61312682613074565b9392505050565b6000806040838503121561313f578081fd5b61314883613074565b9150602083013567ffffffffffffffff811115613163578182fd5b61316f8582860161308b565b9150509250929050565b6000806040838503121561318b578182fd5b61319483613074565b946020939093013593505050565b6000602082840312156131b3578081fd5b813567ffffffffffffffff8111156131c9578182fd5b6131d58482850161308b565b949350505050565b600080604083850312156131ef578182fd5b823567ffffffffffffffff811115613205578283fd5b6132118582860161308b565b92505061322060208401613074565b90509250929050565b6000806040838503121561323b578182fd5b823567ffffffffffffffff80821115613252578384fd5b61325e8683870161308b565b93506020850135915080821115613273578283fd5b5061316f8582860161308b565b600080600060608486031215613294578081fd5b833567ffffffffffffffff808211156132ab578283fd5b6132b78783880161308b565b945060208601359150808211156132cc578283fd5b6132d88783880161308b565b935060408601359150808211156132ed578283fd5b506132fa8682870161308b565b9150509250925092565b60008060408385031215613316578182fd5b823567ffffffffffffffff81111561332c578283fd5b6133388582860161308b565b95602094909401359450505050565b600060208284031215613358578081fd5b5035919050565b60008251613371818460208701613666565b9190910192915050565b815460009081906002810460018083168061339757607f831692505b60208084108214156133b757634e487b7160e01b87526022600452602487fd5b8180156133cb57600181146133dc57613408565b60ff19861689528489019650613408565b6133e58a613643565b885b868110156134005781548b8201529085019083016133e7565b505084890196505b509498975050505050505050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b600060208252825180602084015261346d816040850160208701613666565b601f01601f19169190910160400192915050565b60208082526018908201527f41646472657373206e6f74204261636b7570204f776e65720000000000000000604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252818101527f4d6178696d756d206f66204261636b7570204f776e6572732072656163686564604082015260600190565b6020808252601c908201527f4f776e61626c653a2063616c6c657220697320746865206f776e657200000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601a908201527f53656e646572206973206e6f74204261636b7570204f776e6572000000000000604082015260600190565b60208082526024908201527f4d696e696d756d206e756d626572206f6620766f746573206e6f7420726561636040820152636865642160e01b606082015260800190565b81516001600160a01b031681526020918201519181019190915260400190565b90815260200190565b60009081526020902090565b600082821015613661576136616136ec565b500390565b60005b83811015613681578181015183820152602001613669565b83811115613690576000848401525b50505050565b6002810460018216806136aa57607f821691505b602082108114156136cb57634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156136e5576136e56136ec565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfe4e616d6520646f6573206e6f7420657869737421000000000000000000000000a2646970667358221220d72ec90ec5f490624bdc82a8a353a6086b59fffb89473cb586c5de8efe0b689b64736f6c63430008000033";
export const universalNameStore_SourceCode = "// File: @openzeppelin/contracts/utils/Context.sol\n\n// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n// File: @openzeppelin/contracts/access/Ownable.sol\n\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// File: ../contract-breeder/contracts/ownable-with-backup/OwnableWithBackup.sol\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module which provides a extended access control mechanism to the ownership of a contract.\n *\n * The owner has the same access as in the inherited Ownable contract.\n *\n * In addition the owner can register a set of backup owner that would be able to vote a new owner (one of them).\n * The main reason for that is a backup mechanism for the ownership. In case of a loss of the current owners access capabilities such as loss of the private key,\n * The backup owners can vote for a new owner and any of them would be able move the ownership the newly elected owner.\n *\n */\ncontract OwnableWithBackup is Ownable\n{\n\n    uint public maxMaxNumberOfBackupOwners = 5;\n    uint public minNumberOfVotes = 2;\n\n    struct BackupOwnerData {\n        address newOwner;\n        uint256 timestamp;\n    }\n\n    mapping(address => BackupOwnerData) public backupOwnerDataMap;\n\n    mapping(address => uint256) public backupOwnerIndicesMap;  // to keep track of a record's index in the array\n    address[] public backupOwnerAddressList;\n\n\n\n\n    modifier isNotOwner(address addr) {\n        require(owner() != addr, \"Ownable: caller is the owner\");\n        _;\n    }\n\n\n    modifier isBackupOwner(address addr) {\n        require(backupOwnerDataMap[addr].newOwner != address(0), \"Address not Backup Owner\");\n        _;\n    }\n\n    modifier onlyBackupOwner() {\n        require(backupOwnerDataMap[msg.sender].newOwner != address(0), \"Sender is not Backup Owner\");\n        _;\n    }\n\n    modifier isNotBackupOwner(address addr) {\n        require(backupOwnerDataMap[addr].newOwner == address(0), \"Address not Backup Owner\");\n        _;\n    }\n\n    // Setter for maxNumberOfBackupOwners\n    function setMaxNumberOfBackupOwners(uint newNumber) public onlyOwner {\n        maxMaxNumberOfBackupOwners = newNumber;\n    }\n\n    // Getter for maxNumberOfBackupOwners\n    function getMaxNumberOfBackupOwners() public view returns (uint) {\n        return maxMaxNumberOfBackupOwners;\n    }\n\n    // Setter for minNumberOfVotes\n    function setMinNumberOfVotes(uint newMinVotes) public onlyOwner {\n        minNumberOfVotes = newMinVotes;\n    }\n\n    // Getter for minNumberOfVotes\n    function getMinNumberOfVotes() public view returns (uint) {\n        return minNumberOfVotes;\n    }\n\n    function getBackupOwnerCount() public view returns (uint){\n        return backupOwnerAddressList.length;\n    }\n\n    function getBackupOwner(uint index) public view returns (address){\n        return backupOwnerAddressList[index];\n    }\n\n    function getBackupOwnerData(address _backupOwnerAddress) public onlyBackupOwner view returns (BackupOwnerData memory){\n        return backupOwnerDataMap[_backupOwnerAddress];\n    }\n\n    function removeBackupOwner\n    (\n        address addr\n    )\n    public\n    onlyOwner\n    isBackupOwner(addr)\n    {\n        uint256 toBeDeletedIndex = backupOwnerIndicesMap[addr];\n\n        uint256 lastIndex = backupOwnerAddressList.length - 1;\n        address lastAddress = backupOwnerAddressList[lastIndex];\n\n        backupOwnerIndicesMap[lastAddress] = toBeDeletedIndex;\n\n        // swap\n        backupOwnerAddressList[toBeDeletedIndex] = lastAddress;\n\n        backupOwnerAddressList.pop();\n        delete backupOwnerIndicesMap[addr];\n        delete backupOwnerDataMap[addr];\n    }\n\n    /**\n * @dev Activate the sender as owner if he has the minimum number of votes.\n *\n *\n */\n    function activateOwnership()\n    external\n    onlyBackupOwner\n    {\n        uint counter = 0;\n        for (uint i = 0; i < backupOwnerAddressList.length; i++) {\n            address voter = backupOwnerAddressList[i];\n            if (backupOwnerDataMap[voter].newOwner == msg.sender) {\n                counter++;\n            }\n        }\n        require(counter >= minNumberOfVotes, \"Minimum number of votes not reached!\");\n        _transferOwnership(msg.sender);\n        removeBackupOwner(msg.sender);\n    }\n\n\n    function addBackupOwner\n    (\n        address newBackupOwner\n    )\n    external\n    onlyOwner\n    isNotOwner(newBackupOwner)\n    isNotBackupOwner(newBackupOwner)\n    {\n        require(backupOwnerAddressList.length < maxMaxNumberOfBackupOwners, \"Maximum of Backup Owners reached\");\n        backupOwnerAddressList.push(newBackupOwner);\n        backupOwnerDataMap[newBackupOwner] = BackupOwnerData({newOwner: owner(), timestamp: block.timestamp});\n        backupOwnerIndicesMap[newBackupOwner] = backupOwnerAddressList.length - 1;\n    }\n\n\n    function voteForNewOwner\n    (\n        address newOwner\n    )\n    external\n    onlyBackupOwner\n    isBackupOwner(newOwner)\n    isNotOwner(newOwner)\n    {\n        backupOwnerDataMap[msg.sender].newOwner = newOwner;\n        backupOwnerDataMap[msg.sender].timestamp = block.timestamp;\n    }\n\n\n}\n\n// File: ../contract-breeder/contracts/universal-name-store/UniversalNameStore.sol\n\npragma solidity ^0.8.0;\n\ncontract UniversalNameStore is OwnableWithBackup {\n\n\n    string public constant NAME_IS_NOT_TAKEN = \"Name is not taken!\";\n    string public constant NAME_IS_TAKEN = \"Name is taken!\";\n    string public constant ADDRESS_HAS_NAME = \"Address already has a name!\";\n    string public constant NEW_ADDRESS_HAS_ALREADY_A_NAME = \"New address has already a name!\";\n    string public constant NOT_ALLOWED_CHARS = \"Characters not accepted!\";\n    string public constant NAME_DOES_NOT_EXIST = \"Name does not exist!\";\n    string public constant NOT_OWNER_OF_NAME = \"Not owner of the name!\";\n    string public constant KEY_DOES_NOT_EXIST = \"Key does not exist!\";\n    string public constant NO_VALUE_EXISTS = \"No value exists!\";\n    string public constant ADDRESS_IS_A_CONTRACT = \"Address is a contract!\";\n    string public constant ADDRESS_IS_NOT_A_CONTRACT = \"Address is not a contract!\";\n    string public constant NOT_ENOUGH_MONEY_SENT = \"Not enough money sent!\";\n    string public constant NOT_ENOUGH_BALANCE = \"Not enough balance!\";\n    string public constant VALUE_IS_EMPTY = \"Value is empty!\";\n\n    uint public feeAmount;\n\n\n    mapping(string => address) public nameToAddress;\n\n    mapping(address => string) public addressToName;\n    address[] public addressList;\n    mapping(address => uint) public addressToIndex;\n\n    mapping(address => address) public nameOwnership;\n\n    mapping(address => mapping(string => string)) public addressToKeyToValue;\n\n    mapping(address => string[]) public addressToKeyArray;\n    mapping(address => mapping(string => uint)) public addressToKeyToIndex;\n\n\n    event NameMinted\n    (\n        address indexed owner,\n        string indexed name\n    );\n\n    event NameDeleted\n    (\n        address indexed owner,\n        string indexed name\n    );\n\n    event NameValueSet\n    (\n        string indexed name,\n        string indexed key,\n        string value\n    );\n\n\n    event ValueRemoved\n    (\n        string indexed name,\n        string indexed key,\n        string value\n    );\n    event FeeChanged\n    (\n        uint indexed oldFee,\n        uint indexed newFee\n    );\n\n\n    function checkNameOwnership(address _addr) public view returns (bool) {\n        return _addr == _msgSender() || nameOwnership[_addr] == _msgSender();\n    }\n\n\n    function check_fee() internal {\n        if (msg.value < feeAmount) {\n            revertTransaction(NOT_ENOUGH_MONEY_SENT);\n        }\n    }\n\n    function pay_back() internal {\n        if (msg.value > feeAmount) {\n            payable(msg.sender).transfer(msg.value - feeAmount);\n        }\n    }\n\n    function revertTransaction(string memory reason) internal {\n        // Refund the ether sent with the transaction.\n        payable(msg.sender).transfer(msg.value);\n\n        // Revert the transaction with a reason.\n        revert(reason);\n    }\n\n\n    function withdraw(uint amount)\n    external\n    onlyOwner\n    {\n        require(address(this).balance >= amount, NOT_ENOUGH_BALANCE);\n        address payable recipient = payable(_msgSender());\n        recipient.transfer(amount);\n    }\n\n    function registerMyName(string memory _name) external payable {\n        _register(_name, _msgSender());\n    }\n\n\n    function registerContractName(string memory _name, address _addr) external payable {\n        require(_addr.code.length > 0, ADDRESS_IS_NOT_A_CONTRACT);\n        _register(_name, _addr);\n    }\n\n    function _register(string memory _name, address _addr) internal {\n\n        if (nameToAddress[_name] != address(0)) {\n            revertTransaction(NAME_IS_TAKEN);\n        }\n        if (nameToAddress[_name] == _addr) {\n            revertTransaction(ADDRESS_HAS_NAME);\n        }\n        if (bytes(addressToName[_addr]).length > 0) {\n            revertTransaction(ADDRESS_HAS_NAME);\n        }\n\n        if (!checkValidString(_name)) {\n            revertTransaction(NOT_ALLOWED_CHARS);\n        }\n\n        check_fee();\n\n        addressToName[_addr] = _name;\n        addressList.push(_addr);\n        addressToIndex[_addr] = addressList.length - 1;\n\n        nameToAddress[_name] = _addr;\n        if (_addr != _msgSender()) {\n            nameOwnership[_addr] = _msgSender();\n        }\n\n        pay_back();\n\n        emit NameMinted(_addr, _name);\n    }\n\n\n    function deleteName(string memory _name) external payable {\n        address _addr = nameToAddress[_name];\n        if (_addr == address(0)) {\n            revertTransaction(NAME_DOES_NOT_EXIST);\n        }\n        if (!checkNameOwnership(_addr)) {\n            revertTransaction(NOT_OWNER_OF_NAME);\n        }\n        check_fee();\n\n        uint toBeDeletedIndex = addressToIndex[_addr];\n        address lastAddress = addressList[addressList.length - 1];\n\n        addressToIndex[lastAddress] = toBeDeletedIndex;\n        addressList[toBeDeletedIndex] = lastAddress;\n\n        addressList.pop();\n        delete addressToIndex[_addr];\n        delete addressToName[_addr];\n        delete nameToAddress[_name];\n\n        //delete addressToKeyToValue[_msgSender()];\n        delete addressToKeyArray[_addr];\n        //delete addressToKeyToIndex[_msgSender()];\n\n\n        pay_back();\n\n        emit NameDeleted(_addr, _name);\n    }\n\n\n    function getName(address _addr) public view returns (string memory) {\n        return addressToName[_addr];\n    }\n\n    function getAddressByName(string memory _name) public view returns (address) {\n        require(checkValidString(_name), NOT_ALLOWED_CHARS);\n        return nameToAddress[_name];\n    }\n\n    function getOwnership(address _addr) public view returns (address) {\n        return nameOwnership[_addr];\n    }\n\n    function getAddressCount() public view returns (uint){\n        return addressList.length;\n    }\n\n    function getAddressByIndex(uint _index) public view returns (address){\n        return addressList[_index];\n    }\n\n//\n//   Key/Value pairs mappings\n//\n\n    function getValue(string memory _name, string memory _key) public view returns (string memory) {\n        address _addr = nameToAddress[_name];\n        require(_addr != address(0), NAME_DOES_NOT_EXIST);\n        require(bytes(addressToKeyToValue[_addr][_key]).length != 0, KEY_DOES_NOT_EXIST);\n        return addressToKeyToValue[_addr][_key];\n    }\n\n    function getValueByAddress(address _addr, string memory _key) public view returns (string memory) {\n        require(bytes(addressToKeyToValue[_addr][_key]).length != 0, KEY_DOES_NOT_EXIST);\n        return addressToKeyToValue[_addr][_key];\n    }\n\n    function getKeyCount(string memory _name) public view returns (uint) {\n        address _addr = nameToAddress[_name];\n        require(_addr != address(0), NAME_DOES_NOT_EXIST);\n        return addressToKeyArray[_addr].length;\n    }\n\n    function getKeyCountByAddress(address _addr) public view returns (uint) {\n        return addressToKeyArray[_addr].length;\n    }\n\n    function getKey(string memory _name, uint _index) public view returns (string memory) {\n        address _addr = nameToAddress[_name];\n        require(_addr != address(0), NAME_DOES_NOT_EXIST);\n        return addressToKeyArray[_addr][_index];\n    }\n\n    function getKeyByAddress(address _addr, uint _index) public view returns (string memory) {\n        return addressToKeyArray[_addr][_index];\n    }\n\n    function setValue(string memory _name, string memory _key, string memory _value) public payable {\n        address _addr = nameToAddress[_name];\n        if (bytes(_value).length == 0) {\n            revertTransaction(VALUE_IS_EMPTY);\n        }\n        if (_addr == address(0)) {\n            revertTransaction(NAME_DOES_NOT_EXIST);\n        }\n        if (!checkNameOwnership(_addr)) {\n            revertTransaction(NOT_OWNER_OF_NAME);\n        }\n        check_fee();\n        if (bytes(addressToKeyToValue[_addr][_key]).length == 0) {\n            uint indx = addressToKeyArray[_addr].length;\n            addressToKeyArray[_addr].push(_key);\n            addressToKeyToIndex[_addr][_key] = indx;\n        }\n        addressToKeyToValue[_addr][_key] = _value;\n        pay_back();\n        emit NameValueSet(addressToName[_addr], _key, _value);\n    }\n\n\n    function removeValue(string memory _name, string memory _key) public payable {\n        address _addr = nameToAddress[_name];\n        if (_addr == address(0)) {\n            revertTransaction(NAME_DOES_NOT_EXIST);\n        }\n        if (!checkNameOwnership(_addr)) {\n            revertTransaction(NOT_OWNER_OF_NAME);\n        }\n        if (bytes(addressToKeyToValue[_addr][_key]).length == 0) {\n            revertTransaction(NO_VALUE_EXISTS);\n        }\n\n        check_fee();\n\n        string memory _value = addressToKeyToValue[_addr][_key];\n\n        uint _length = addressToKeyArray[_addr].length;\n\n        uint _indexOfKey = addressToKeyToIndex[_addr][_key];\n        string memory _lastKey = addressToKeyArray[_addr][_length - 1];\n\n        addressToKeyArray[_addr][_indexOfKey] = _lastKey;\n        addressToKeyArray[_addr].pop();\n\n        addressToKeyToIndex[_addr][_lastKey] = _indexOfKey;\n\n        delete addressToKeyToIndex[_addr][_key];\n        delete addressToKeyToValue[_addr][_key];\n\n        pay_back();\n\n        emit ValueRemoved(_name, _key, _value);\n    }\n\n//\n//  reassign a name to a new address, all key/values are removed\n//\n    function reassignName(string memory _name, address _newAddress) public payable\n    {\n        address _addr = nameToAddress[_name];\n        if (_addr == address(0)) {\n            revertTransaction(NAME_DOES_NOT_EXIST);\n        }\n        if (!checkNameOwnership(_addr)) {\n            revertTransaction(NOT_OWNER_OF_NAME);\n        }\n        if (bytes(addressToName[_newAddress]).length > 0) {\n            revertTransaction(NEW_ADDRESS_HAS_ALREADY_A_NAME);\n        }\n        check_fee();\n        nameToAddress[_name] = _newAddress;\n        delete addressToName[_addr];\n        addressToName[_newAddress] = _name;\n\n        if (nameOwnership[_addr] != address(0)) {\n            nameOwnership[_addr] = _newAddress;\n        }\n        pay_back();\n    }\n\n\n    function setFee(uint _feeAmount) external onlyOwner {\n        uint _oldFee = feeAmount;\n        feeAmount = _feeAmount;\n        emit FeeChanged(_oldFee, _feeAmount);\n    }\n\n    function getFee() public view returns (uint) {\n        return feeAmount;\n    }\n\n    function checkValidString(string memory input) public pure returns (bool) {\n        bytes memory b = bytes(input);\n        for (uint i = 0; i < b.length; i++) {\n            bytes1 char = b[i];\n            if ((i == 0 || i == b.length - 1) && (char == 0x2E || char == 0x2D)) {\n                return false;\n            }\n// Check if character is not an uppercase letter, not a digit, and not an underscore\n            if (\n                !(char >= 0x41 && char <= 0x5A) &&\n            !(char >= 0x30 && char <= 0x39) &&\n            char != 0x2D &&\n            char != 0x2E\n            ) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n\n}\n";
export const universalNameStore_Version    = "solc-emscripten-wasm32-v0.8.0+commit.c7dfd78e.js";