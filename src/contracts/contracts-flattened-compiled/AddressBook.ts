
export const addressBookAbi         = [{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"userAddress","type":"address"},{"indexed":true,"internalType":"string","name":"name","type":"string"}],"name":"AddAddressEvent","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"userAddress","type":"address"},{"indexed":true,"internalType":"string","name":"name","type":"string"}],"name":"RemoveAddressEvent","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"userAddress","type":"address"},{"indexed":true,"internalType":"string","name":"oldName","type":"string"},{"indexed":true,"internalType":"string","name":"newName","type":"string"}],"name":"UpdateAddressEvent","type":"event"},{"inputs":[],"name":"ADDRESS_NOT_ZERO","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ALREADY_ADDED","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"NAME_IS_TAKEN","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"NAME_NOT_EMPTY","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"NOT_ADDED","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"NOT_A_EOA_ADDRESS","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"activateOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"userAddress","type":"address"},{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"description","type":"string"},{"internalType":"string","name":"email","type":"string"},{"internalType":"string","name":"phone","type":"string"},{"internalType":"string","name":"name1","type":"string"},{"internalType":"string","name":"name2","type":"string"},{"internalType":"string","name":"name3","type":"string"},{"internalType":"string","name":"status","type":"string"},{"internalType":"uint256","name":"created","type":"uint256"},{"internalType":"uint256","name":"updated","type":"uint256"}],"internalType":"struct AddressBook.AddressData","name":"_entry","type":"tuple"}],"name":"add","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newBackupOwner","type":"address"}],"name":"addBackupOwner","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"addressList","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"backupOwnerAddressList","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"backupOwnerDataMap","outputs":[{"internalType":"address","name":"newOwner","type":"address"},{"internalType":"uint256","name":"timestamp","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"backupOwnerIndicesMap","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"dataMap","outputs":[{"internalType":"address","name":"userAddress","type":"address"},{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"description","type":"string"},{"internalType":"string","name":"email","type":"string"},{"internalType":"string","name":"phone","type":"string"},{"internalType":"string","name":"name1","type":"string"},{"internalType":"string","name":"name2","type":"string"},{"internalType":"string","name":"name3","type":"string"},{"internalType":"string","name":"status","type":"string"},{"internalType":"uint256","name":"created","type":"uint256"},{"internalType":"uint256","name":"updated","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getAddressData","outputs":[{"components":[{"internalType":"address","name":"userAddress","type":"address"},{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"description","type":"string"},{"internalType":"string","name":"email","type":"string"},{"internalType":"string","name":"phone","type":"string"},{"internalType":"string","name":"name1","type":"string"},{"internalType":"string","name":"name2","type":"string"},{"internalType":"string","name":"name3","type":"string"},{"internalType":"string","name":"status","type":"string"},{"internalType":"uint256","name":"created","type":"uint256"},{"internalType":"uint256","name":"updated","type":"uint256"}],"internalType":"struct AddressBook.AddressData","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getAddressDataCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getBackupOwner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getBackupOwnerCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"userAddress","type":"address"}],"name":"getByAddress","outputs":[{"components":[{"internalType":"address","name":"userAddress","type":"address"},{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"description","type":"string"},{"internalType":"string","name":"email","type":"string"},{"internalType":"string","name":"phone","type":"string"},{"internalType":"string","name":"name1","type":"string"},{"internalType":"string","name":"name2","type":"string"},{"internalType":"string","name":"name3","type":"string"},{"internalType":"string","name":"status","type":"string"},{"internalType":"uint256","name":"created","type":"uint256"},{"internalType":"uint256","name":"updated","type":"uint256"}],"internalType":"struct AddressBook.AddressData","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"_name","type":"string"}],"name":"getByName","outputs":[{"components":[{"internalType":"address","name":"userAddress","type":"address"},{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"description","type":"string"},{"internalType":"string","name":"email","type":"string"},{"internalType":"string","name":"phone","type":"string"},{"internalType":"string","name":"name1","type":"string"},{"internalType":"string","name":"name2","type":"string"},{"internalType":"string","name":"name3","type":"string"},{"internalType":"string","name":"status","type":"string"},{"internalType":"uint256","name":"created","type":"uint256"},{"internalType":"uint256","name":"updated","type":"uint256"}],"internalType":"struct AddressBook.AddressData","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getMaxNumberOfBackupOwners","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getMinNumberOfVotes","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"indexMap","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"maxMaxNumberOfBackupOwners","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"minNumberOfVotes","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_userAddress","type":"address"}],"name":"remove","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"addr","type":"address"}],"name":"removeBackupOwner","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"","type":"string"}],"name":"reverseMap","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"newNumber","type":"uint256"}],"name":"setMaxNumberOfBackupOwners","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"newMinVotes","type":"uint256"}],"name":"setMinNumberOfVotes","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_userAddress","type":"address"},{"internalType":"string","name":"_status","type":"string"}],"name":"setStatus","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"userAddress","type":"address"},{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"description","type":"string"},{"internalType":"string","name":"email","type":"string"},{"internalType":"string","name":"phone","type":"string"},{"internalType":"string","name":"name1","type":"string"},{"internalType":"string","name":"name2","type":"string"},{"internalType":"string","name":"name3","type":"string"},{"internalType":"string","name":"status","type":"string"},{"internalType":"uint256","name":"created","type":"uint256"},{"internalType":"uint256","name":"updated","type":"uint256"}],"internalType":"struct AddressBook.AddressData","name":"_entry","type":"tuple"}],"name":"update","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"voteForNewOwner","outputs":[],"stateMutability":"nonpayable","type":"function"}] as const;
export const addressBookBytecode    = "6080604052600560015560036002553480156200001b57600080fd5b50620000306200002a62000036565b6200003a565b6200008a565b3390565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b612de4806200009a6000396000f3fe608060405234801561001057600080fd5b506004361061021c5760003560e01c806372d05f6d11610125578063bf320270116100ad578063e6ac738d1161007c578063e6ac738d14610438578063eb0da70f14610440578063f2fde38b14610453578063fa3230c114610466578063fd2939ad146104795761021c565b8063bf320270146103d2578063d0ddb82f146103fc578063da140c851461040f578063dfee322e146104175761021c565b8063a6feb44d116100f4578063a6feb44d1461037e578063b11d0f8b14610391578063b336ad8314610399578063b641151d146103ac578063b810fb43146103bf5761021c565b806372d05f6d146103305780638da5cb5b14610343578063972368ac14610358578063a66c94e91461036b5761021c565b80632bcba828116101a8578063533b7d8511610177578063533b7d85146103085780635e01a6d11461031057806368b68332146103185780636f895b8314610320578063715018a6146103285761021c565b80632bcba828146102ba5780632d5c9c99146102cd57806330257bf7146102e05780634c8dcf32146103005761021c565b8063186f93fc116101ef578063186f93fc14610264578063266316db14610277578063280805cf1461028c57806329092d0e1461029f5780632a08eadf146102b25761021c565b806302e9ad4d1461022157806306129d9e1461023f5780630ebbbbe614610247578063134148841461024f575b600080fd5b61022961048c565b60405161023691906128e1565b60405180910390f35b6102296104a8565b6102296104c4565b6102576104e0565b6040516102369190612bc6565b61025761027236600461254a565b6104e6565b61028a61028536600461277c565b6104f8565b005b61028a61029a3660046125eb565b610505565b61028a6102ad36600461254a565b610923565b610229610cba565b61028a6102c836600461277c565b610cd6565b61028a6102db36600461254a565b610ce3565b6102f36102ee36600461254a565b610e2e565b6040516102369190612aa3565b610229611316565b610257611332565b610229611338565b610257611354565b61025761135a565b61028a611360565b61028a61033e36600461254a565b611374565b61034b6114fe565b60405161023691906127e9565b61034b61036636600461277c565b61150d565b61028a61037936600461254a565b61154b565b61034b61038c3660046125b0565b61162b565b61028a611651565b6102f36103a73660046125b0565b611742565b6102f36103ba36600461277c565b611787565b61034b6103cd36600461277c565b611805565b6103e56103e036600461254a565b61182f565b6040516102369b9a999897969594939291906127fd565b61028a61040a366004612564565b611ccc565b610257611dec565b61042a61042536600461254a565b611df2565b6040516102369291906128c8565b610257611e17565b61025761044e36600461254a565b611e1d565b61028a61046136600461254a565b611e2f565b61028a6104743660046125eb565b611e66565b61034b61048736600461277c565b6122ed565b604051806060016040528060238152602001612d656023913981565b6040518060600160405280602f8152602001612ce9602f913981565b604051806060016040528060228152602001612d436022913981565b60025481565b60046020526000908152604090205481565b6105006122fd565b600155565b61050d6122fd565b600081602001515111604051806060016040528060228152602001612d4360229139906105565760405162461bcd60e51b815260040161054d91906128e1565b60405180910390fd5b5060006001600160a01b031681600001516001600160a01b031614156040518060600160405280602a8152602001612cbf602a9139906105a95760405162461bcd60e51b815260040161054d91906128e1565b5080600001516001600160a01b0316803b806020016040519081016040528181526000908060200190933c516000146040518060600160405280602f8152602001612ce9602f91399061060f5760405162461bcd60e51b815260040161054d91906128e1565b5080516001600160a01b0390811660009081526006602090815260409182902054825160608101909352602b8084529316159290612d1890830139906106685760405162461bcd60e51b815260040161054d91906128e1565b5060006001600160a01b03166007826020015160405161068891906127cd565b908152604080519182900360209081018320546060840190925260238084526001600160a01b039092169390931492612d6590830139906106dc5760405162461bcd60e51b815260040161054d91906128e1565b5080516001600160a01b039081166000908152600660209081526040909120835181546001600160a01b031916931692909217825580830151805184939261072b926001850192910190612390565b5060408201518051610747916002840191602090910190612390565b5060608201518051610763916003840191602090910190612390565b506080820151805161077f916004840191602090910190612390565b5060a0820151805161079b916005840191602090910190612390565b5060c082015180516107b7916006840191602090910190612390565b5060e082015180516107d3916007840191602090910190612390565b5061010082015180516107f0916008840191602090910190612390565b50610120820151600982015561014090910151600a909101558051602082015160405160079161081f916127cd565b908152604080516020928190038301902080546001600160a01b03199081166001600160a01b039586161790915584518416600090815260069093529082204260099091015583516008805460018181018355948290527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30180549093169190941617905590546108b09190612bf9565b81516001600160a01b0316600090815260096020908152604091829020929092559082015190516108e191906127cd565b604051908190038120825190916001600160a01b03909116907f9eb6ed514b82b6c807ec6d7d4b39cdbadb2fe15b0d3ca0a001972b4d2776a11d90600090a350565b61092b6122fd565b6001600160a01b0381166000908152600660205260408120600101805461095190612c3c565b80601f016020809104026020016040519081016040528092919081815260200182805461097d90612c3c565b80156109ca5780601f1061099f576101008083540402835291602001916109ca565b820191906000526020600020905b8154815290600101906020018083116109ad57829003601f168201915b505050505090506000815111604051806060016040528060278152602001612d886027913990610a0d5760405162461bcd60e51b815260040161054d91906128e1565b506001600160a01b038216600090815260096020526040902054600854610a465760405162461bcd60e51b815260040161054d90612971565b826001600160a01b031660088281548110610a7157634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031614610aa35760405162461bcd60e51b815260040161054d906129ca565b600854600090610ab590600190612bf9565b9050600060088281548110610ada57634e487b7160e01b600052603260045260246000fd5b600091825260209091200154600880546001600160a01b039092169250829185908110610b1757634e487b7160e01b600052603260045260246000fd5b600091825260208083209190910180546001600160a01b0319166001600160a01b0394851617905591831681526009909152604090208390556008805480610b6f57634e487b7160e01b600052603160045260246000fd5b60008281526020808220830160001990810180546001600160a01b031990811690915593019093556001600160a01b038816815260098352604080822082905560069093529182208054909116815590610bcc6001830182612414565b610bda600283016000612414565b610be8600383016000612414565b610bf6600483016000612414565b610c04600583016000612414565b610c12600683016000612414565b610c20600783016000612414565b610c2e600883016000612414565b6009820160009055600a8201600090555050600784604051610c5091906127cd565b90815260405190819003602001812080546001600160a01b0319169055610c789085906127cd565b604051908190038120906001600160a01b038716907f9f683bb081f5d924cca83e4c8aed3fb6bca341ac4d5eff749011c9461e9e7ab290600090a35050505050565b6040518060600160405280602a8152602001612cbf602a913981565b610cde6122fd565b600255565b610ceb6122fd565b80806001600160a01b0316610cfe6114fe565b6001600160a01b03161415610d255760405162461bcd60e51b815260040161054d90612993565b6001600160a01b0380831660009081526003602052604090205483911615610d5f5760405162461bcd60e51b815260040161054d906128f4565b600580546001810182556000919091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180546001600160a01b0319166001600160a01b0385161790556040805180820190915280610dbd6114fe565b6001600160a01b0390811682524260209283015285811660009081526003835260409020835181546001600160a01b0319169216919091178155910151600191820155600554610e0d9190612bf9565b6001600160a01b039093166000908152600460205260409020929092555050565b610e36612450565b6001600160a01b03808316600090815260066020908152604091829020825161016081019093528054909316825260018301805492939291840191610e7a90612c3c565b80601f0160208091040260200160405190810160405280929190818152602001828054610ea690612c3c565b8015610ef35780601f10610ec857610100808354040283529160200191610ef3565b820191906000526020600020905b815481529060010190602001808311610ed657829003601f168201915b50505050508152602001600282018054610f0c90612c3c565b80601f0160208091040260200160405190810160405280929190818152602001828054610f3890612c3c565b8015610f855780601f10610f5a57610100808354040283529160200191610f85565b820191906000526020600020905b815481529060010190602001808311610f6857829003601f168201915b50505050508152602001600382018054610f9e90612c3c565b80601f0160208091040260200160405190810160405280929190818152602001828054610fca90612c3c565b80156110175780601f10610fec57610100808354040283529160200191611017565b820191906000526020600020905b815481529060010190602001808311610ffa57829003601f168201915b5050505050815260200160048201805461103090612c3c565b80601f016020809104026020016040519081016040528092919081815260200182805461105c90612c3c565b80156110a95780601f1061107e576101008083540402835291602001916110a9565b820191906000526020600020905b81548152906001019060200180831161108c57829003601f168201915b505050505081526020016005820180546110c290612c3c565b80601f01602080910402602001604051908101604052809291908181526020018280546110ee90612c3c565b801561113b5780601f106111105761010080835404028352916020019161113b565b820191906000526020600020905b81548152906001019060200180831161111e57829003601f168201915b5050505050815260200160068201805461115490612c3c565b80601f016020809104026020016040519081016040528092919081815260200182805461118090612c3c565b80156111cd5780601f106111a2576101008083540402835291602001916111cd565b820191906000526020600020905b8154815290600101906020018083116111b057829003601f168201915b505050505081526020016007820180546111e690612c3c565b80601f016020809104026020016040519081016040528092919081815260200182805461121290612c3c565b801561125f5780601f106112345761010080835404028352916020019161125f565b820191906000526020600020905b81548152906001019060200180831161124257829003601f168201915b5050505050815260200160088201805461127890612c3c565b80601f01602080910402602001604051908101604052809291908181526020018280546112a490612c3c565b80156112f15780601f106112c6576101008083540402835291602001916112f1565b820191906000526020600020905b8154815290600101906020018083116112d457829003601f168201915b5050505050815260200160098201548152602001600a8201548152505090505b919050565b6040518060600160405280602b8152602001612d18602b913981565b60015490565b604051806060016040528060278152602001612d886027913981565b60025490565b60015481565b6113686122fd565b611372600061233c565b565b61137c6122fd565b6001600160a01b038082166000908152600360205260409020548291166113b55760405162461bcd60e51b815260040161054d906128f4565b6001600160a01b0382166000908152600460205260408120546005549091906113e090600190612bf9565b905060006005828154811061140557634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b0316808352600490915260409091208490556005805491925082918590811061145357634e487b7160e01b600052603260045260246000fd5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060058054806114a057634e487b7160e01b600052603160045260246000fd5b60008281526020808220830160001990810180546001600160a01b031990811690915593019093556001600160a01b039790971687526004825260408088208890556003909252908620805490911681556001019490945550505050565b6000546001600160a01b031690565b60006005828154811061153057634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031692915050565b336000908152600360205260409020546001600160a01b03166115805760405162461bcd60e51b815260040161054d90612a28565b6001600160a01b038082166000908152600360205260409020548291166115b95760405162461bcd60e51b815260040161054d906128f4565b81806001600160a01b03166115cc6114fe565b6001600160a01b031614156115f35760405162461bcd60e51b815260040161054d90612993565b505033600090815260036020526040902080546001600160a01b0319166001600160a01b039290921691909117815542600190910155565b80516020818301810180516007825292820191909301209152546001600160a01b031681565b336000908152600360205260409020546001600160a01b03166116865760405162461bcd60e51b815260040161054d90612a28565b6000805b60055481101561170a576000600582815481106116b757634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b039081168084526003909252604090922054909250163314156116f757826116f381612c77565b9350505b508061170281612c77565b91505061168a565b5060025481101561172d5760405162461bcd60e51b815260040161054d90612a5f565b6117363361233c565b61173f33611374565b50565b61174a612450565b600060078360405161175c91906127cd565b908152604051908190036020019020546001600160a01b0316905061178081610e2e565b9392505050565b61178f612450565b60066000600884815481106117b457634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b039081168452838201949094526040928301909120825161016081019093528054909316825260018301805492939291840191610e7a90612c3c565b6008818154811061181557600080fd5b6000918252602090912001546001600160a01b0316905081565b600660205260009081526040902080546001820180546001600160a01b03909216929161185b90612c3c565b80601f016020809104026020016040519081016040528092919081815260200182805461188790612c3c565b80156118d45780601f106118a9576101008083540402835291602001916118d4565b820191906000526020600020905b8154815290600101906020018083116118b757829003601f168201915b5050505050908060020180546118e990612c3c565b80601f016020809104026020016040519081016040528092919081815260200182805461191590612c3c565b80156119625780601f1061193757610100808354040283529160200191611962565b820191906000526020600020905b81548152906001019060200180831161194557829003601f168201915b50505050509080600301805461197790612c3c565b80601f01602080910402602001604051908101604052809291908181526020018280546119a390612c3c565b80156119f05780601f106119c5576101008083540402835291602001916119f0565b820191906000526020600020905b8154815290600101906020018083116119d357829003601f168201915b505050505090806004018054611a0590612c3c565b80601f0160208091040260200160405190810160405280929190818152602001828054611a3190612c3c565b8015611a7e5780601f10611a5357610100808354040283529160200191611a7e565b820191906000526020600020905b815481529060010190602001808311611a6157829003601f168201915b505050505090806005018054611a9390612c3c565b80601f0160208091040260200160405190810160405280929190818152602001828054611abf90612c3c565b8015611b0c5780601f10611ae157610100808354040283529160200191611b0c565b820191906000526020600020905b815481529060010190602001808311611aef57829003601f168201915b505050505090806006018054611b2190612c3c565b80601f0160208091040260200160405190810160405280929190818152602001828054611b4d90612c3c565b8015611b9a5780601f10611b6f57610100808354040283529160200191611b9a565b820191906000526020600020905b815481529060010190602001808311611b7d57829003601f168201915b505050505090806007018054611baf90612c3c565b80601f0160208091040260200160405190810160405280929190818152602001828054611bdb90612c3c565b8015611c285780601f10611bfd57610100808354040283529160200191611c28565b820191906000526020600020905b815481529060010190602001808311611c0b57829003601f168201915b505050505090806008018054611c3d90612c3c565b80601f0160208091040260200160405190810160405280929190818152602001828054611c6990612c3c565b8015611cb65780601f10611c8b57610100808354040283529160200191611cb6565b820191906000526020600020905b815481529060010190602001808311611c9957829003601f168201915b50505050509080600901549080600a015490508b565b611cd46122fd565b6001600160a01b03821660009081526006602052604081206001018054611cfa90612c3c565b80601f0160208091040260200160405190810160405280929190818152602001828054611d2690612c3c565b8015611d735780601f10611d4857610100808354040283529160200191611d73565b820191906000526020600020905b815481529060010190602001808311611d5657829003601f168201915b505050505090506000815111604051806060016040528060278152602001612d886027913990611db65760405162461bcd60e51b815260040161054d91906128e1565b506001600160a01b03831660009081526006602090815260409091208351611de692600890920191850190612390565b50505050565b60055490565b600360205260009081526040902080546001909101546001600160a01b039091169082565b60085490565b60096020526000908152604090205481565b611e376122fd565b6001600160a01b038116611e5d5760405162461bcd60e51b815260040161054d9061292b565b61173f8161233c565b611e6e6122fd565b80516020808301516040805160608101909152602a80825291926001600160a01b03851615159290612cbf9083013990611ebb5760405162461bcd60e51b815260040161054d91906128e1565b506000815111604051806060016040528060228152602001612d436022913990611ef85760405162461bcd60e51b815260040161054d91906128e1565b506001600160a01b03828116600090815260066020908152604091829020548251606081019093526027808452931615159290612d889083013990611f505760405162461bcd60e51b815260040161054d91906128e1565b506001600160a01b03821660009081526006602052604081206001018054611f7790612c3c565b80601f0160208091040260200160405190810160405280929190818152602001828054611fa390612c3c565b8015611ff05780601f10611fc557610100808354040283529160200191611ff0565b820191906000526020600020905b815481529060010190602001808311611fd357829003601f168201915b50505050509050826001600160a01b031660078360405161201191906127cd565b908152604051908190036020019020546001600160a01b03161480612067575060006001600160a01b031660078360405161204c91906127cd565b908152604051908190036020019020546001600160a01b0316145b604051806060016040528060238152602001612d65602391399061209e5760405162461bcd60e51b815260040161054d91906128e1565b50826001600160a01b03166007836040516120b991906127cd565b908152604051908190036020019020546001600160a01b031614612144576007816040516120e791906127cd565b90815260405190819003602001812080546001600160a01b031916905583906007906121149085906127cd565b90815260405190819003602001902080546001600160a01b03929092166001600160a01b03199092169190911790555b6001600160a01b038381166000818152600660208181526040832060098101546101208b0152426101408b0152939092528152865182546001600160a01b031916931692909217815585820151805187936121a6926001850192910190612390565b50604082015180516121c2916002840191602090910190612390565b50606082015180516121de916003840191602090910190612390565b50608082015180516121fa916004840191602090910190612390565b5060a08201518051612216916005840191602090910190612390565b5060c08201518051612232916006840191602090910190612390565b5060e0820151805161224e916007840191602090910190612390565b50610100820151805161226b916008840191602090910190612390565b50610120820151600982015561014090910151600a909101556040516122929083906127cd565b6040518091039020816040516122a891906127cd565b604051908190038120865190916001600160a01b03909116907f3018c0ab139affff0f44fb7c8ed649400a1d69f35a2d099f62ce3d7f3420595490600090a450505050565b6005818154811061181557600080fd5b61230561238c565b6001600160a01b03166123166114fe565b6001600160a01b0316146113725760405162461bcd60e51b815260040161054d906129f3565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b3390565b82805461239c90612c3c565b90600052602060002090601f0160209004810192826123be5760008555612404565b82601f106123d757805160ff1916838001178555612404565b82800160010185558215612404579182015b828111156124045782518255916020019190600101906123e9565b506124109291506124b3565b5090565b50805461242090612c3c565b6000825580601f10612432575061173f565b601f01602090049060005260206000209081019061173f91906124b3565b60405180610160016040528060006001600160a01b03168152602001606081526020016060815260200160608152602001606081526020016060815260200160608152602001606081526020016060815260200160008152602001600081525090565b5b8082111561241057600081556001016124b4565b80356001600160a01b038116811461131157600080fd5b600082601f8301126124ef578081fd5b813567ffffffffffffffff81111561250957612509612ca8565b61251c601f8201601f1916602001612bcf565b818152846020838601011115612530578283fd5b816020850160208301379081016020019190915292915050565b60006020828403121561255b578081fd5b611780826124c8565b60008060408385031215612576578081fd5b61257f836124c8565b9150602083013567ffffffffffffffff81111561259a578182fd5b6125a6858286016124df565b9150509250929050565b6000602082840312156125c1578081fd5b813567ffffffffffffffff8111156125d7578182fd5b6125e3848285016124df565b949350505050565b6000602082840312156125fc578081fd5b813567ffffffffffffffff80821115612613578283fd5b8184019150610160808387031215612629578384fd5b61263281612bcf565b905061263d836124c8565b8152602083013582811115612650578485fd5b61265c878286016124df565b602083015250604083013582811115612673578485fd5b61267f878286016124df565b604083015250606083013582811115612696578485fd5b6126a2878286016124df565b6060830152506080830135828111156126b9578485fd5b6126c5878286016124df565b60808301525060a0830135828111156126dc578485fd5b6126e8878286016124df565b60a08301525060c0830135828111156126ff578485fd5b61270b878286016124df565b60c08301525060e083013582811115612722578485fd5b61272e878286016124df565b60e0830152506101008084013583811115612747578586fd5b612753888287016124df565b918301919091525061012083810135908201526101409283013592810192909252509392505050565b60006020828403121561278d578081fd5b5035919050565b6001600160a01b03169052565b600081518084526127b9816020860160208601612c10565b601f01601f19169290920160200192915050565b600082516127df818460208701612c10565b9190910192915050565b6001600160a01b0391909116815260200190565b600061016061280c838f612794565b80602084015261281e8184018e6127a1565b90508281036040840152612832818d6127a1565b90508281036060840152612846818c6127a1565b9050828103608084015261285a818b6127a1565b905082810360a084015261286e818a6127a1565b905082810360c084015261288281896127a1565b905082810360e084015261289681886127a1565b90508281036101008401526128ab81876127a1565b610120840195909552505061014001529998505050505050505050565b6001600160a01b03929092168252602082015260400190565b60006020825261178060208301846127a1565b60208082526018908201527f41646472657373206e6f74204261636b7570204f776e65720000000000000000604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252600890820152676e6f20656e74727960c01b604082015260600190565b6020808252601c908201527f4f776e61626c653a2063616c6c657220697320746865206f776e657200000000604082015260600190565b6020808252600f908201526e61646472657373206d697373696e6760881b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601a908201527f53656e646572206973206e6f74204261636b7570204f776e6572000000000000604082015260600190565b60208082526024908201527f4d696e696d756d206e756d626572206f6620766f746573206e6f7420726561636040820152636865642160e01b606082015260800190565b600060208252612ab7602083018451612794565b6020830151610160806040850152612ad36101808501836127a1565b91506040850151601f1980868503016060870152612af184836127a1565b93506060870151915080868503016080870152612b0e84836127a1565b935060808701519150808685030160a0870152612b2b84836127a1565b935060a08701519150808685030160c0870152612b4884836127a1565b935060c08701519150808685030160e0870152612b6584836127a1565b935060e08701519150610100818786030181880152612b8485846127a1565b945080880151925050610120818786030181880152612ba385846127a1565b908801516101408881019190915290970151929095019190915250929392505050565b90815260200190565b60405181810167ffffffffffffffff81118282101715612bf157612bf1612ca8565b604052919050565b600082821015612c0b57612c0b612c92565b500390565b60005b83811015612c2b578181015183820152602001612c13565b83811115611de65750506000910152565b600281046001821680612c5057607f821691505b60208210811415612c7157634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415612c8b57612c8b612c92565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfe41646472657373426f6f6b203a207573657220616464726573732063616e206e6f74206265207a65726f41646472657373426f6f6b203a20757365722061646472657373206973206e6f74206120454f41206164647265737341646472657373426f6f6b203a2075736572206164647265737320697320616c726561647920616464656441646472657373426f6f6b3a206e616d652063616e206e6f7420626520656d70747941646472657373426f6f6b203a206e616d6520697320616c72656164792074616b656e41646472657373426f6f6b203a20757365722061646472657373206973206e6f74206164646564a2646970667358221220abdbbfe64fb909951f2ee15f15be015c26fa85e35f473ff6cf44265d8fed44b964736f6c63430008000033";
export const addressBook_SourceCode = "// File: @openzeppelin/contracts/utils/Context.sol\n\n// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n// File: @openzeppelin/contracts/access/Ownable.sol\n\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// File: contracts/ownable-with-backup/OwnableWithBackup.sol\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module which provides a extended access control mechanism to the ownership of a contract.\n *\n * The owner has the same access as in the inherited Ownable contract.\n *\n * In addition the owner can register a set of backup owner that would be able to vote a new owner (one of them).\n * The main reason for that is a backup mechanism for the ownership. In case of a loss of the current owners access capabilities such as loss of the private key,\n * The backup owners can vote for a new owner and any of them would be able move the ownership the newly elected owner.\n *\n */\ncontract OwnableWithBackup is Ownable\n{\n\n    uint public maxMaxNumberOfBackupOwners = 5;\n    uint public minNumberOfVotes = 3;\n\n    struct BackupOwnerData {\n        address newOwner;\n        uint256 timestamp;\n    }\n\n    mapping(address => BackupOwnerData) public backupOwnerDataMap;\n\n    mapping(address => uint256) public backupOwnerIndicesMap;  // to keep track of a record's index in the array\n    address[] public backupOwnerAddressList;\n\n\n\n\n    modifier isNotOwner(address addr) {\n        require(owner() != addr, \"Ownable: caller is the owner\");\n        _;\n    }\n\n\n    modifier isBackupOwner(address addr) {\n        require(backupOwnerDataMap[addr].newOwner != address(0), \"Address not Backup Owner\");\n        _;\n    }\n\n    modifier onlyBackupOwner() {\n        require(backupOwnerDataMap[msg.sender].newOwner != address(0), \"Sender is not Backup Owner\");\n        _;\n    }\n\n    modifier isNotBackupOwner(address addr) {\n        require(backupOwnerDataMap[addr].newOwner == address(0), \"Address not Backup Owner\");\n        _;\n    }\n\n    // Setter for maxNumberOfBackupOwners\n    function setMaxNumberOfBackupOwners(uint newNumber) public onlyOwner {\n        maxMaxNumberOfBackupOwners = newNumber;\n    }\n\n    // Getter for maxNumberOfBackupOwners\n    function getMaxNumberOfBackupOwners() public view returns (uint) {\n        return maxMaxNumberOfBackupOwners;\n    }\n\n    // Setter for minNumberOfVotes\n    function setMinNumberOfVotes(uint newMinVotes) public onlyOwner {\n        minNumberOfVotes = newMinVotes;\n    }\n\n    // Getter for minNumberOfVotes\n    function getMinNumberOfVotes() public view returns (uint) {\n        return minNumberOfVotes;\n    }\n\n    function getBackupOwnerCount() public view returns (uint){\n        return backupOwnerAddressList.length;\n    }\n\n    function getBackupOwner(uint index) public view returns (address){\n        return backupOwnerAddressList[index];\n    }\n\n    function removeBackupOwner\n    (\n        address addr\n    )\n    public\n    onlyOwner\n    isBackupOwner(addr)\n    {\n        uint256 toBeDeletedIndex = backupOwnerIndicesMap[addr];\n\n        uint256 lastIndex = backupOwnerAddressList.length - 1;\n        address lastAddress = backupOwnerAddressList[lastIndex];\n\n        backupOwnerIndicesMap[lastAddress] = toBeDeletedIndex;\n\n        // swap\n        backupOwnerAddressList[toBeDeletedIndex] = lastAddress;\n\n        backupOwnerAddressList.pop();\n        delete backupOwnerIndicesMap[addr];\n        delete backupOwnerDataMap[addr];\n    }\n\n    /**\n * @dev Activate the sender as owner if he has the minimum number of votes.\n *\n *\n */\n    function activateOwnership()\n    external\n    onlyBackupOwner\n    {\n        uint counter = 0;\n        for (uint i = 0; i < backupOwnerAddressList.length; i++) {\n            address voter = backupOwnerAddressList[i];\n            if (backupOwnerDataMap[voter].newOwner == msg.sender) {\n                counter++;\n            }\n        }\n        require(counter >= minNumberOfVotes, \"Minimum number of votes not reached!\");\n        _transferOwnership(msg.sender);\n        removeBackupOwner(msg.sender);\n    }\n\n\n    function addBackupOwner\n    (\n        address newBackupOwner\n    )\n    external\n    onlyOwner\n    isNotOwner(newBackupOwner)\n    isNotBackupOwner(newBackupOwner)\n    {\n        backupOwnerAddressList.push(newBackupOwner);\n        backupOwnerDataMap[newBackupOwner] = BackupOwnerData({newOwner: owner(), timestamp: block.timestamp});\n        backupOwnerIndicesMap[newBackupOwner] = backupOwnerAddressList.length - 1;\n    }\n\n\n    function voteForNewOwner\n    (\n        address newOwner\n    )\n    external\n    onlyBackupOwner\n    isBackupOwner(newOwner)\n    isNotOwner(newOwner)\n    {\n        backupOwnerDataMap[msg.sender].newOwner = newOwner;\n        backupOwnerDataMap[msg.sender].timestamp = block.timestamp;\n    }\n\n\n}\n\n// File: contracts/domain/AddressBook.sol\n\npragma solidity ^0.8.0;\n\n// Attributes for a Address Book Entry\n\n//\n// *userAddress: real user address\n// *name: some reasonable name eg.: GlaruSoft AG Share\n// desription: decription of the user\n// email: constructor values in order of constructor parameters as stringified JSON: [\"GlaruSoft AG\", \"GLS\"]\n// phone: main phone of this user\n// name1: eg.: Last Name\n// name2: eg.: FirstName\n// name3: eg.: ...\n// status: eg.: active, deactivated\n// timestamp: time added (seconds after 1970-01-01)\n//\n\n// Only the owner can insert and update data!\n\ncontract AddressBook is OwnableWithBackup\n{\n    event AddAddressEvent(address indexed userAddress, string indexed name);\n    event UpdateAddressEvent(address indexed userAddress, string indexed oldName, string indexed newName);\n    event RemoveAddressEvent(address indexed userAddress, string indexed name);\n\n    string constant public NAME_NOT_EMPTY = 'AddressBook: name can not be empty';\n    string constant public NOT_ADDED = 'AddressBook : user address is not added';\n    string constant public ADDRESS_NOT_ZERO = 'AddressBook : user address can not be zero';\n    string constant public NOT_A_EOA_ADDRESS = 'AddressBook : user address is not a EOA address';\n    string constant public ALREADY_ADDED = 'AddressBook : user address is already added';\n    string constant public NAME_IS_TAKEN = 'AddressBook : name is already taken';\n\n    struct AddressData {\n\n        address userAddress;\n        string name;\n        string description;\n        string email;\n        string phone;\n\n        string name1;\n        string name2;\n        string name3;\n\n        string status;\n        uint created;\n        uint updated;\n\n    }\n\n    mapping(address => AddressData) public dataMap;\n    mapping(string => address) public reverseMap;\n    address[] public addressList;\n    mapping(address => uint) public indexMap;\n\n    function add(AddressData memory _entry) external onlyOwner {\n\n        require(bytes(_entry.name).length > 0, NAME_NOT_EMPTY);\n        require(_entry.userAddress != address(0), ADDRESS_NOT_ZERO);\n        require(_entry.userAddress.code.length == 0, NOT_A_EOA_ADDRESS);\n        require(dataMap[_entry.userAddress].userAddress == address(0), ALREADY_ADDED);\n        require(reverseMap[_entry.name] == address(0), NAME_IS_TAKEN);\n\n        dataMap[_entry.userAddress] = _entry;\n        reverseMap[_entry.name] = _entry.userAddress;\n        dataMap[_entry.userAddress].created = block.timestamp;\n\n        addressList.push(_entry.userAddress);\n        indexMap[_entry.userAddress] = addressList.length - 1;\n\n        emit AddAddressEvent(_entry.userAddress, _entry.name);\n    }\n\n        function update(AddressData memory _entry) external onlyOwner {\n\n        address _userAddress = _entry.userAddress;\n        string memory _new_name = _entry.name;\n        require(_userAddress != address(0), ADDRESS_NOT_ZERO);\n        require(bytes(_new_name).length > 0, NAME_NOT_EMPTY);\n\n        require(dataMap[_userAddress].userAddress != address(0), NOT_ADDED);\n\n        string memory _old_name = dataMap[_userAddress].name;\n\n\n        require(reverseMap[_new_name] == _userAddress || reverseMap[_new_name] == address(0), NAME_IS_TAKEN);\n\n        if (reverseMap[_new_name] != _userAddress){\n            delete reverseMap[_old_name];\n            reverseMap[_new_name]=_userAddress;\n        }\n        _entry.created = dataMap[_userAddress].created ;\n        _entry.updated = block.timestamp;\n        dataMap[_userAddress]=_entry;\n\n        emit UpdateAddressEvent(_entry.userAddress, _old_name, _new_name);\n    }\n\n    function remove(address _userAddress) external onlyOwner {\n        string memory _name = dataMap[_userAddress].name;\n        require(bytes(_name).length > 0, NOT_ADDED);\n        uint256 toBeDeletedIndex = indexMap[_userAddress];\n\n        require(addressList.length > 0, 'no entry');\n        require(toBeDeletedIndex >= 0, 'index missing');\n\n        require(addressList[toBeDeletedIndex] == _userAddress, 'address missing');\n\n\n        uint256 lastIndex = addressList.length - 1;\n        address lastAddress = addressList[lastIndex];\n\n// move last address to to-be-deleted-address\n        addressList[toBeDeletedIndex] = lastAddress;\n        indexMap[lastAddress] = toBeDeletedIndex;\n\n        addressList.pop();\n        delete indexMap[_userAddress];\n\n        delete dataMap[_userAddress];\n        delete reverseMap[_name];\n\n        emit RemoveAddressEvent(_userAddress, _name);\n    }\n\n    function getAddressDataCount() external view returns (uint){\n        return addressList.length;\n    }\n\n\n    function getAddressData(uint index) external view returns (AddressData memory){\n        return dataMap[addressList[index]];\n    }\n\n    function setStatus(address _userAddress, string memory _status) external onlyOwner {\n        string memory _name = dataMap[_userAddress].name;\n        require(bytes(_name).length > 0, NOT_ADDED);\n        dataMap[_userAddress].status = _status;\n    }\n\n    function getByAddress(address userAddress) public view returns (AddressData memory){\n        return dataMap[userAddress];\n    }\n\n    function getByName(string memory _name) public view returns (AddressData memory){\n        address ca = reverseMap[_name];\n        return getByAddress(ca);\n    }\n\n\n}\n";
export const addressBook_Version    = "solc-emscripten-wasm32-v0.8.0+commit.c7dfd78e.js";