
export const contractRegistryAbi         = [{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"contractAddress","type":"address"},{"indexed":true,"internalType":"string","name":"contractName","type":"string"},{"indexed":true,"internalType":"string","name":"name","type":"string"}],"name":"RegisterContractData","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"contractAddress","type":"address"},{"indexed":true,"internalType":"string","name":"contractName","type":"string"},{"indexed":true,"internalType":"string","name":"name","type":"string"}],"name":"UnregisterContractData","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"contractAddress","type":"address"},{"indexed":true,"internalType":"string","name":"oldName","type":"string"},{"indexed":true,"internalType":"string","name":"newName","type":"string"}],"name":"UpdateContractData","type":"event"},{"inputs":[],"name":"ADDRESS_NOT_ZERO","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ALREADY_REGISTERED","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"NAME_IS_TAKEN","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"NAME_NOT_EMPTY","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"NOT_A_CONTRACT","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"NOT_REGISTERED","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"activateOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newBackupOwner","type":"address"}],"name":"addBackupOwner","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"addressList","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"backupOwnerAddressList","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"backupOwnerDataMap","outputs":[{"internalType":"address","name":"newOwner","type":"address"},{"internalType":"uint256","name":"timestamp","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"backupOwnerIndicesMap","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getBackupOwner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getBackupOwnerCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"contractAddress","type":"address"}],"name":"getByAddress","outputs":[{"components":[{"internalType":"address","name":"contractAddress","type":"address"},{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"description","type":"string"},{"internalType":"string","name":"constructorArgs","type":"string"},{"internalType":"string","name":"url","type":"string"},{"internalType":"string","name":"sourceCodeUrl","type":"string"},{"internalType":"string","name":"contractName","type":"string"},{"internalType":"string","name":"contractType","type":"string"},{"internalType":"string","name":"status","type":"string"},{"internalType":"uint256","name":"created","type":"uint256"},{"internalType":"uint256","name":"updated","type":"uint256"}],"internalType":"struct ContractRegistry.ContractData","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"_name","type":"string"}],"name":"getByName","outputs":[{"components":[{"internalType":"address","name":"contractAddress","type":"address"},{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"description","type":"string"},{"internalType":"string","name":"constructorArgs","type":"string"},{"internalType":"string","name":"url","type":"string"},{"internalType":"string","name":"sourceCodeUrl","type":"string"},{"internalType":"string","name":"contractName","type":"string"},{"internalType":"string","name":"contractType","type":"string"},{"internalType":"string","name":"status","type":"string"},{"internalType":"uint256","name":"created","type":"uint256"},{"internalType":"uint256","name":"updated","type":"uint256"}],"internalType":"struct ContractRegistry.ContractData","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getContractData","outputs":[{"components":[{"internalType":"address","name":"contractAddress","type":"address"},{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"description","type":"string"},{"internalType":"string","name":"constructorArgs","type":"string"},{"internalType":"string","name":"url","type":"string"},{"internalType":"string","name":"sourceCodeUrl","type":"string"},{"internalType":"string","name":"contractName","type":"string"},{"internalType":"string","name":"contractType","type":"string"},{"internalType":"string","name":"status","type":"string"},{"internalType":"uint256","name":"created","type":"uint256"},{"internalType":"uint256","name":"updated","type":"uint256"}],"internalType":"struct ContractRegistry.ContractData","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getContractDataCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getMaxNumberOfBackupOwners","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getMinNumberOfVotes","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"indexMap","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"maxMaxNumberOfBackupOwners","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"minNumberOfVotes","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"contractAddress","type":"address"},{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"description","type":"string"},{"internalType":"string","name":"constructorArgs","type":"string"},{"internalType":"string","name":"url","type":"string"},{"internalType":"string","name":"sourceCodeUrl","type":"string"},{"internalType":"string","name":"contractName","type":"string"},{"internalType":"string","name":"contractType","type":"string"},{"internalType":"string","name":"status","type":"string"},{"internalType":"uint256","name":"created","type":"uint256"},{"internalType":"uint256","name":"updated","type":"uint256"}],"internalType":"struct ContractRegistry.ContractData","name":"_entry","type":"tuple"}],"name":"register","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"registerMap","outputs":[{"internalType":"address","name":"contractAddress","type":"address"},{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"description","type":"string"},{"internalType":"string","name":"constructorArgs","type":"string"},{"internalType":"string","name":"url","type":"string"},{"internalType":"string","name":"sourceCodeUrl","type":"string"},{"internalType":"string","name":"contractName","type":"string"},{"internalType":"string","name":"contractType","type":"string"},{"internalType":"string","name":"status","type":"string"},{"internalType":"uint256","name":"created","type":"uint256"},{"internalType":"uint256","name":"updated","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"addr","type":"address"}],"name":"removeBackupOwner","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"","type":"string"}],"name":"reverseMap","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"newNumber","type":"uint256"}],"name":"setMaxNumberOfBackupOwners","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"newMinVotes","type":"uint256"}],"name":"setMinNumberOfVotes","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_contractAddress","type":"address"},{"internalType":"string","name":"_status","type":"string"}],"name":"setStatus","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_contractAddress","type":"address"}],"name":"unregister","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"contractAddress","type":"address"},{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"description","type":"string"},{"internalType":"string","name":"constructorArgs","type":"string"},{"internalType":"string","name":"url","type":"string"},{"internalType":"string","name":"sourceCodeUrl","type":"string"},{"internalType":"string","name":"contractName","type":"string"},{"internalType":"string","name":"contractType","type":"string"},{"internalType":"string","name":"status","type":"string"},{"internalType":"uint256","name":"created","type":"uint256"},{"internalType":"uint256","name":"updated","type":"uint256"}],"internalType":"struct ContractRegistry.ContractData","name":"_entry","type":"tuple"}],"name":"update","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"voteForNewOwner","outputs":[],"stateMutability":"nonpayable","type":"function"}] as const;
export const contractRegistryBytecode    = "6080604052600560015560036002553480156200001b57600080fd5b50620000306200002a62000036565b6200003a565b6200008a565b3390565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b612f08806200009a6000396000f3fe608060405234801561001057600080fd5b506004361061021c5760003560e01c806372d05f6d11610125578063d0ddb82f116100ad578063ef1f37571161007c578063ef1f375714610438578063f2fde38b1461044b578063f57785401461045e578063fa3230c114610466578063fd2939ad146104795761021c565b8063d0ddb82f146103e9578063da140c85146103fc578063dfee322e14610404578063eb0da70f146104255761021c565b8063a6feb44d116100f4578063a6feb44d146103a0578063ac54fdb0146103b3578063b11d0f8b146103bb578063b336ad83146103c3578063b810fb43146103d65761021c565b806372d05f6d146103525780638da5cb5b14610365578063972368ac1461037a578063a66c94e91461038d5761021c565b80632bcba828116101a8578063533b7d8511610177578063533b7d851461032a57806360f498531461033257806368b683321461033a5780636f895b8314610342578063715018a61461034a5761021c565b80632bcba828146102d15780632d5c9c99146102e45780632ec2c246146102f757806330257bf71461030a5761021c565b806313414884116101ef5780631341488414610286578063186f93fc1461028e578063221c8623146102a1578063266316db146102b65780632a08eadf146102c95761021c565b806302e9ad4d146102215780630e3b6f2c1461023f5780630ebbbbe6146102545780630f9989161461025c575b600080fd5b61022961048c565b60405161023691906129c7565b60405180910390f35b6102476104a8565b6040516102369190612cad565b6102296104ae565b61026f61026a366004612630565b6104ca565b6040516102369b9a999897969594939291906128e3565b610247610967565b61024761029c366004612630565b61096d565b6102b46102af3660046126d1565b61097f565b005b6102b46102c4366004612862565b610db7565b610229610dc4565b6102b46102df366004612862565b610de0565b6102b46102f2366004612630565b610ded565b6102b4610305366004612630565b610f38565b61031d610318366004612630565b61139b565b6040516102369190612b8a565b610247611883565b610229611889565b6102476118a5565b6102476118ab565b6102b46118b1565b6102b4610360366004612630565b6118c5565b61036d611a4f565b60405161023691906128cf565b61036d610388366004612862565b611a5e565b6102b461039b366004612630565b611a9c565b61036d6103ae366004612696565b611b7c565b610229611ba2565b6102b4611bbe565b61031d6103d1366004612696565b611caf565b61036d6103e4366004612862565b611cf4565b6102b46103f736600461264a565b611d1e565b610247611e3e565b610417610412366004612630565b611e44565b6040516102369291906129ae565b610247610433366004612630565b611e69565b61031d610446366004612862565b611e7b565b6102b4610459366004612630565b611ef9565b610229611f30565b6102b46104743660046126d1565b611f4c565b61036d610487366004612862565b6123d3565b604051806060016040528060288152602001612eab6028913981565b60085490565b604051806060016040528060278152602001612de36027913981565b600660205260009081526040902080546001820180546001600160a01b0390921692916104f690612d23565b80601f016020809104026020016040519081016040528092919081815260200182805461052290612d23565b801561056f5780601f106105445761010080835404028352916020019161056f565b820191906000526020600020905b81548152906001019060200180831161055257829003601f168201915b50505050509080600201805461058490612d23565b80601f01602080910402602001604051908101604052809291908181526020018280546105b090612d23565b80156105fd5780601f106105d2576101008083540402835291602001916105fd565b820191906000526020600020905b8154815290600101906020018083116105e057829003601f168201915b50505050509080600301805461061290612d23565b80601f016020809104026020016040519081016040528092919081815260200182805461063e90612d23565b801561068b5780601f106106605761010080835404028352916020019161068b565b820191906000526020600020905b81548152906001019060200180831161066e57829003601f168201915b5050505050908060040180546106a090612d23565b80601f01602080910402602001604051908101604052809291908181526020018280546106cc90612d23565b80156107195780601f106106ee57610100808354040283529160200191610719565b820191906000526020600020905b8154815290600101906020018083116106fc57829003601f168201915b50505050509080600501805461072e90612d23565b80601f016020809104026020016040519081016040528092919081815260200182805461075a90612d23565b80156107a75780601f1061077c576101008083540402835291602001916107a7565b820191906000526020600020905b81548152906001019060200180831161078a57829003601f168201915b5050505050908060060180546107bc90612d23565b80601f01602080910402602001604051908101604052809291908181526020018280546107e890612d23565b80156108355780601f1061080a57610100808354040283529160200191610835565b820191906000526020600020905b81548152906001019060200180831161081857829003601f168201915b50505050509080600701805461084a90612d23565b80601f016020809104026020016040519081016040528092919081815260200182805461087690612d23565b80156108c35780601f10610898576101008083540402835291602001916108c3565b820191906000526020600020905b8154815290600101906020018083116108a657829003601f168201915b5050505050908060080180546108d890612d23565b80601f016020809104026020016040519081016040528092919081815260200182805461090490612d23565b80156109515780601f1061092657610100808354040283529160200191610951565b820191906000526020600020905b81548152906001019060200180831161093457829003601f168201915b50505050509080600901549080600a015490508b565b60025481565b60046020526000908152604090205481565b6109876123e3565b600081602001515111604051806060016040528060278152602001612de360279139906109d05760405162461bcd60e51b81526004016109c791906129c7565b60405180910390fd5b5060006001600160a01b031681600001516001600160a01b03161415604051806060016040528060338152602001612e436033913990610a235760405162461bcd60e51b81526004016109c791906129c7565b50600081600001516001600160a01b0316803b806020016040519081016040528181526000908060200190933c51116040518060600160405280603d8152602001612da6603d913990610a895760405162461bcd60e51b81526004016109c791906129c7565b5080516001600160a01b039081166000908152600660209081526040918290205482516060810190935260398084529316159290612e0a9083013990610ae25760405162461bcd60e51b81526004016109c791906129c7565b5060006001600160a01b031660078260200151604051610b0291906128b3565b908152604080519182900360209081018320546060840190925260288084526001600160a01b039092169390931492612eab9083013990610b565760405162461bcd60e51b81526004016109c791906129c7565b5080516001600160a01b039081166000908152600660209081526040909120835181546001600160a01b0319169316929092178255808301518051849392610ba5926001850192910190612476565b5060408201518051610bc1916002840191602090910190612476565b5060608201518051610bdd916003840191602090910190612476565b5060808201518051610bf9916004840191602090910190612476565b5060a08201518051610c15916005840191602090910190612476565b5060c08201518051610c31916006840191602090910190612476565b5060e08201518051610c4d916007840191602090910190612476565b506101008201518051610c6a916008840191602090910190612476565b50610120820151600982015561014090910151600a9091015580516020820151604051600791610c99916128b3565b908152604080516020928190038301902080546001600160a01b03199081166001600160a01b039586161790915584518416600090815260069093529082204260099091015583516008805460018181018355948290527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee3018054909316919094161790559054610d2a9190612ce0565b81516001600160a01b031660009081526009602090815260409182902092909255908201519051610d5b91906128b3565b60405180910390208160c00151604051610d7591906128b3565b604051908190038120835190916001600160a01b03909116907f7e44687a14b501488d03e360b01b2b01967f41b6819aadce7d4f0faa169968ef90600090a450565b610dbf6123e3565b600155565b604051806060016040528060338152602001612e436033913981565b610de86123e3565b600255565b610df56123e3565b80806001600160a01b0316610e08611a4f565b6001600160a01b03161415610e2f5760405162461bcd60e51b81526004016109c790612a79565b6001600160a01b0380831660009081526003602052604090205483911615610e695760405162461bcd60e51b81526004016109c7906129da565b600580546001810182556000919091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180546001600160a01b0319166001600160a01b0385161790556040805180820190915280610ec7611a4f565b6001600160a01b0390811682524260209283015285811660009081526003835260409020835181546001600160a01b0319169216919091178155910151600191820155600554610f179190612ce0565b6001600160a01b039093166000908152600460205260409020929092555050565b610f406123e3565b6001600160a01b03811660009081526006602052604081206001018054610f6690612d23565b80601f0160208091040260200160405190810160405280929190818152602001828054610f9290612d23565b8015610fdf5780601f10610fb457610100808354040283529160200191610fdf565b820191906000526020600020905b815481529060010190602001808311610fc257829003601f168201915b50505050509050600060066000846001600160a01b03166001600160a01b03168152602001908152602001600020600601805461101b90612d23565b80601f016020809104026020016040519081016040528092919081815260200182805461104790612d23565b80156110945780601f1061106957610100808354040283529160200191611094565b820191906000526020600020905b81548152906001019060200180831161107757829003601f168201915b505050505090506000825111604051806060016040528060358152602001612e7660359139906110d75760405162461bcd60e51b81526004016109c791906129c7565b506001600160a01b0383166000908152600960205260409020546008546111105760405162461bcd60e51b81526004016109c790612a57565b836001600160a01b03166008828154811061113b57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03161461116d5760405162461bcd60e51b81526004016109c790612ae5565b60085460009061117f90600190612ce0565b90506000600882815481106111a457634e487b7160e01b600052603260045260246000fd5b600091825260209091200154600880546001600160a01b0390921692508291859081106111e157634e487b7160e01b600052603260045260246000fd5b600091825260208083209190910180546001600160a01b0319166001600160a01b039485161790559183168152600990915260409020839055600880548061123957634e487b7160e01b600052603160045260246000fd5b60008281526020808220830160001990810180546001600160a01b031990811690915593019093556001600160a01b03891681526009835260408082208290556006909352918220805490911681559061129660018301826124fa565b6112a46002830160006124fa565b6112b26003830160006124fa565b6112c06004830160006124fa565b6112ce6005830160006124fa565b6112dc6006830160006124fa565b6112ea6007830160006124fa565b6112f86008830160006124fa565b6009820160009055600a820160009055505060078560405161131a91906128b3565b90815260405190819003602001812080546001600160a01b03191690556113429086906128b3565b60405180910390208460405161135891906128b3565b604051908190038120906001600160a01b038916907f715b8cacc26ca6184ba5b400f81164ace8cdba389bdaa104d680fa3376692d1590600090a4505050505050565b6113a3612536565b6001600160a01b038083166000908152600660209081526040918290208251610160810190935280549093168252600183018054929392918401916113e790612d23565b80601f016020809104026020016040519081016040528092919081815260200182805461141390612d23565b80156114605780601f1061143557610100808354040283529160200191611460565b820191906000526020600020905b81548152906001019060200180831161144357829003601f168201915b5050505050815260200160028201805461147990612d23565b80601f01602080910402602001604051908101604052809291908181526020018280546114a590612d23565b80156114f25780601f106114c7576101008083540402835291602001916114f2565b820191906000526020600020905b8154815290600101906020018083116114d557829003601f168201915b5050505050815260200160038201805461150b90612d23565b80601f016020809104026020016040519081016040528092919081815260200182805461153790612d23565b80156115845780601f1061155957610100808354040283529160200191611584565b820191906000526020600020905b81548152906001019060200180831161156757829003601f168201915b5050505050815260200160048201805461159d90612d23565b80601f01602080910402602001604051908101604052809291908181526020018280546115c990612d23565b80156116165780601f106115eb57610100808354040283529160200191611616565b820191906000526020600020905b8154815290600101906020018083116115f957829003601f168201915b5050505050815260200160058201805461162f90612d23565b80601f016020809104026020016040519081016040528092919081815260200182805461165b90612d23565b80156116a85780601f1061167d576101008083540402835291602001916116a8565b820191906000526020600020905b81548152906001019060200180831161168b57829003601f168201915b505050505081526020016006820180546116c190612d23565b80601f01602080910402602001604051908101604052809291908181526020018280546116ed90612d23565b801561173a5780601f1061170f5761010080835404028352916020019161173a565b820191906000526020600020905b81548152906001019060200180831161171d57829003601f168201915b5050505050815260200160078201805461175390612d23565b80601f016020809104026020016040519081016040528092919081815260200182805461177f90612d23565b80156117cc5780601f106117a1576101008083540402835291602001916117cc565b820191906000526020600020905b8154815290600101906020018083116117af57829003601f168201915b505050505081526020016008820180546117e590612d23565b80601f016020809104026020016040519081016040528092919081815260200182805461181190612d23565b801561185e5780601f106118335761010080835404028352916020019161185e565b820191906000526020600020905b81548152906001019060200180831161184157829003601f168201915b5050505050815260200160098201548152602001600a8201548152505090505b919050565b60015490565b604051806060016040528060358152602001612e766035913981565b60025490565b60015481565b6118b96123e3565b6118c36000612422565b565b6118cd6123e3565b6001600160a01b038082166000908152600360205260409020548291166119065760405162461bcd60e51b81526004016109c7906129da565b6001600160a01b03821660009081526004602052604081205460055490919061193190600190612ce0565b905060006005828154811061195657634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b031680835260049091526040909120849055600580549192508291859081106119a457634e487b7160e01b600052603260045260246000fd5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060058054806119f157634e487b7160e01b600052603160045260246000fd5b60008281526020808220830160001990810180546001600160a01b031990811690915593019093556001600160a01b039790971687526004825260408088208890556003909252908620805490911681556001019490945550505050565b6000546001600160a01b031690565b600060058281548110611a8157634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031692915050565b336000908152600360205260409020546001600160a01b0316611ad15760405162461bcd60e51b81526004016109c790612b0f565b6001600160a01b03808216600090815260036020526040902054829116611b0a5760405162461bcd60e51b81526004016109c7906129da565b81806001600160a01b0316611b1d611a4f565b6001600160a01b03161415611b445760405162461bcd60e51b81526004016109c790612a79565b505033600090815260036020526040902080546001600160a01b0319166001600160a01b039290921691909117815542600190910155565b80516020818301810180516007825292820191909301209152546001600160a01b031681565b6040518060600160405280603d8152602001612da6603d913981565b336000908152600360205260409020546001600160a01b0316611bf35760405162461bcd60e51b81526004016109c790612b0f565b6000805b600554811015611c7757600060058281548110611c2457634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b03908116808452600390925260409092205490925016331415611c645782611c6081612d5e565b9350505b5080611c6f81612d5e565b915050611bf7565b50600254811015611c9a5760405162461bcd60e51b81526004016109c790612b46565b611ca333612422565b611cac336118c5565b50565b611cb7612536565b6000600783604051611cc991906128b3565b908152604051908190036020019020546001600160a01b03169050611ced8161139b565b9392505050565b60088181548110611d0457600080fd5b6000918252602090912001546001600160a01b0316905081565b611d266123e3565b6001600160a01b03821660009081526006602052604081206001018054611d4c90612d23565b80601f0160208091040260200160405190810160405280929190818152602001828054611d7890612d23565b8015611dc55780601f10611d9a57610100808354040283529160200191611dc5565b820191906000526020600020905b815481529060010190602001808311611da857829003601f168201915b505050505090506000815111604051806060016040528060358152602001612e766035913990611e085760405162461bcd60e51b81526004016109c791906129c7565b506001600160a01b03831660009081526006602090815260409091208351611e3892600890920191850190612476565b50505050565b60055490565b600360205260009081526040902080546001909101546001600160a01b039091169082565b60096020526000908152604090205481565b611e83612536565b6006600060088481548110611ea857634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b0390811684528382019490945260409283019091208251610160810190935280549093168252600183018054929392918401916113e790612d23565b611f016123e3565b6001600160a01b038116611f275760405162461bcd60e51b81526004016109c790612a11565b611cac81612422565b604051806060016040528060398152602001612e0a6039913981565b611f546123e3565b80516020808301516040805160608101909152603380825291926001600160a01b03851615159290612e439083013990611fa15760405162461bcd60e51b81526004016109c791906129c7565b506000815111604051806060016040528060278152602001612de36027913990611fde5760405162461bcd60e51b81526004016109c791906129c7565b506001600160a01b03828116600090815260066020908152604091829020548251606081019093526035808452931615159290612e7690830139906120365760405162461bcd60e51b81526004016109c791906129c7565b506001600160a01b0382166000908152600660205260408120600101805461205d90612d23565b80601f016020809104026020016040519081016040528092919081815260200182805461208990612d23565b80156120d65780601f106120ab576101008083540402835291602001916120d6565b820191906000526020600020905b8154815290600101906020018083116120b957829003601f168201915b50505050509050826001600160a01b03166007836040516120f791906128b3565b908152604051908190036020019020546001600160a01b0316148061214d575060006001600160a01b031660078360405161213291906128b3565b908152604051908190036020019020546001600160a01b0316145b604051806060016040528060288152602001612eab60289139906121845760405162461bcd60e51b81526004016109c791906129c7565b50826001600160a01b031660078360405161219f91906128b3565b908152604051908190036020019020546001600160a01b03161461222a576007816040516121cd91906128b3565b90815260405190819003602001812080546001600160a01b031916905583906007906121fa9085906128b3565b90815260405190819003602001902080546001600160a01b03929092166001600160a01b03199092169190911790555b6001600160a01b038381166000818152600660208181526040832060098101546101208b0152426101408b0152939092528152865182546001600160a01b0319169316929092178155858201518051879361228c926001850192910190612476565b50604082015180516122a8916002840191602090910190612476565b50606082015180516122c4916003840191602090910190612476565b50608082015180516122e0916004840191602090910190612476565b5060a082015180516122fc916005840191602090910190612476565b5060c08201518051612318916006840191602090910190612476565b5060e08201518051612334916007840191602090910190612476565b506101008201518051612351916008840191602090910190612476565b50610120820151600982015561014090910151600a909101556040516123789083906128b3565b60405180910390208160405161238e91906128b3565b604051908190038120865190916001600160a01b03909116907f27464844fc9241cc9e580cfd9b69544206a81cc396650fb36e23217758b45d8090600090a450505050565b60058181548110611d0457600080fd5b6123eb612472565b6001600160a01b03166123fc611a4f565b6001600160a01b0316146118c35760405162461bcd60e51b81526004016109c790612ab0565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b3390565b82805461248290612d23565b90600052602060002090601f0160209004810192826124a457600085556124ea565b82601f106124bd57805160ff19168380011785556124ea565b828001600101855582156124ea579182015b828111156124ea5782518255916020019190600101906124cf565b506124f6929150612599565b5090565b50805461250690612d23565b6000825580601f106125185750611cac565b601f016020900490600052602060002090810190611cac9190612599565b60405180610160016040528060006001600160a01b03168152602001606081526020016060815260200160608152602001606081526020016060815260200160608152602001606081526020016060815260200160008152602001600081525090565b5b808211156124f6576000815560010161259a565b80356001600160a01b038116811461187e57600080fd5b600082601f8301126125d5578081fd5b813567ffffffffffffffff8111156125ef576125ef612d8f565b612602601f8201601f1916602001612cb6565b818152846020838601011115612616578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215612641578081fd5b611ced826125ae565b6000806040838503121561265c578081fd5b612665836125ae565b9150602083013567ffffffffffffffff811115612680578182fd5b61268c858286016125c5565b9150509250929050565b6000602082840312156126a7578081fd5b813567ffffffffffffffff8111156126bd578182fd5b6126c9848285016125c5565b949350505050565b6000602082840312156126e2578081fd5b813567ffffffffffffffff808211156126f9578283fd5b818401915061016080838703121561270f578384fd5b61271881612cb6565b9050612723836125ae565b8152602083013582811115612736578485fd5b612742878286016125c5565b602083015250604083013582811115612759578485fd5b612765878286016125c5565b60408301525060608301358281111561277c578485fd5b612788878286016125c5565b60608301525060808301358281111561279f578485fd5b6127ab878286016125c5565b60808301525060a0830135828111156127c2578485fd5b6127ce878286016125c5565b60a08301525060c0830135828111156127e5578485fd5b6127f1878286016125c5565b60c08301525060e083013582811115612808578485fd5b612814878286016125c5565b60e083015250610100808401358381111561282d578586fd5b612839888287016125c5565b918301919091525061012083810135908201526101409283013592810192909252509392505050565b600060208284031215612873578081fd5b5035919050565b6001600160a01b03169052565b6000815180845261289f816020860160208601612cf7565b601f01601f19169290920160200192915050565b600082516128c5818460208701612cf7565b9190910192915050565b6001600160a01b0391909116815260200190565b60006101606128f2838f61287a565b8060208401526129048184018e612887565b90508281036040840152612918818d612887565b9050828103606084015261292c818c612887565b90508281036080840152612940818b612887565b905082810360a0840152612954818a612887565b905082810360c08401526129688189612887565b905082810360e084015261297c8188612887565b90508281036101008401526129918187612887565b610120840195909552505061014001529998505050505050505050565b6001600160a01b03929092168252602082015260400190565b600060208252611ced6020830184612887565b60208082526018908201527f41646472657373206e6f74204261636b7570204f776e65720000000000000000604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252600890820152676e6f20656e74727960c01b604082015260600190565b6020808252601c908201527f4f776e61626c653a2063616c6c657220697320746865206f776e657200000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526010908201526f636f6e7472616374206d697373696e6760801b604082015260600190565b6020808252601a908201527f53656e646572206973206e6f74204261636b7570204f776e6572000000000000604082015260600190565b60208082526024908201527f4d696e696d756d206e756d626572206f6620766f746573206e6f7420726561636040820152636865642160e01b606082015260800190565b600060208252612b9e60208301845161287a565b6020830151610160806040850152612bba610180850183612887565b91506040850151601f1980868503016060870152612bd88483612887565b93506060870151915080868503016080870152612bf58483612887565b935060808701519150808685030160a0870152612c128483612887565b935060a08701519150808685030160c0870152612c2f8483612887565b935060c08701519150808685030160e0870152612c4c8483612887565b935060e08701519150610100818786030181880152612c6b8584612887565b945080880151925050610120818786030181880152612c8a8584612887565b908801516101408881019190915290970151929095019190915250929392505050565b90815260200190565b60405181810167ffffffffffffffff81118282101715612cd857612cd8612d8f565b604052919050565b600082821015612cf257612cf2612d79565b500390565b60005b83811015612d12578181015183820152602001612cfa565b83811115611e385750506000910152565b600281046001821680612d3757607f821691505b60208210811415612d5857634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415612d7257612d72612d79565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfe436f6e74726163745265676973747279203a20636f6e74726163742061646472657373206973206e6f74206120636f6e74726163742061646472657373436f6e747261637452656769737472793a206e616d652063616e206e6f7420626520656d707479436f6e74726163745265676973747279203a20636f6e7472616374206164647265737320697320616c72656164792072656769737465726564436f6e74726163745265676973747279203a20636f6e747261637420616464726573732063616e206e6f74206265207a65726f436f6e74726163745265676973747279203a20636f6e74726163742061646472657373206973206e6f742072656769737465726564436f6e74726163745265676973747279203a206e616d6520697320616c72656164792074616b656ea26469706673582212203b852493c1d02d2d768e5337c54f84f49a614a14e0dd4eda1131e21da4d08daa64736f6c63430008000033";
export const contractRegistry_SourceCode = "// File: @openzeppelin/contracts/utils/Context.sol\n\n// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n// File: @openzeppelin/contracts/access/Ownable.sol\n\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// File: contracts/ownable-with-backup/OwnableWithBackup.sol\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module which provides a extended access control mechanism to the ownership of a contract.\n *\n * The owner has the same access as in the inherited Ownable contract.\n *\n * In addition the owner can register a set of backup owner that would be able to vote a new owner (one of them).\n * The main reason for that is a backup mechanism for the ownership. In case of a loss of the current owners access capabilities such as loss of the private key,\n * The backup owners can vote for a new owner and any of them would be able move the ownership the newly elected owner.\n *\n */\ncontract OwnableWithBackup is Ownable\n{\n\n    uint public maxMaxNumberOfBackupOwners = 5;\n    uint public minNumberOfVotes = 3;\n\n    struct BackupOwnerData {\n        address newOwner;\n        uint256 timestamp;\n    }\n\n    mapping(address => BackupOwnerData) public backupOwnerDataMap;\n\n    mapping(address => uint256) public backupOwnerIndicesMap;  // to keep track of a record's index in the array\n    address[] public backupOwnerAddressList;\n\n\n\n\n    modifier isNotOwner(address addr) {\n        require(owner() != addr, \"Ownable: caller is the owner\");\n        _;\n    }\n\n\n    modifier isBackupOwner(address addr) {\n        require(backupOwnerDataMap[addr].newOwner != address(0), \"Address not Backup Owner\");\n        _;\n    }\n\n    modifier onlyBackupOwner() {\n        require(backupOwnerDataMap[msg.sender].newOwner != address(0), \"Sender is not Backup Owner\");\n        _;\n    }\n\n    modifier isNotBackupOwner(address addr) {\n        require(backupOwnerDataMap[addr].newOwner == address(0), \"Address not Backup Owner\");\n        _;\n    }\n\n    // Setter for maxNumberOfBackupOwners\n    function setMaxNumberOfBackupOwners(uint newNumber) public onlyOwner {\n        maxMaxNumberOfBackupOwners = newNumber;\n    }\n\n    // Getter for maxNumberOfBackupOwners\n    function getMaxNumberOfBackupOwners() public view returns (uint) {\n        return maxMaxNumberOfBackupOwners;\n    }\n\n    // Setter for minNumberOfVotes\n    function setMinNumberOfVotes(uint newMinVotes) public onlyOwner {\n        minNumberOfVotes = newMinVotes;\n    }\n\n    // Getter for minNumberOfVotes\n    function getMinNumberOfVotes() public view returns (uint) {\n        return minNumberOfVotes;\n    }\n\n    function getBackupOwnerCount() public view returns (uint){\n        return backupOwnerAddressList.length;\n    }\n\n    function getBackupOwner(uint index) public view returns (address){\n        return backupOwnerAddressList[index];\n    }\n\n    function removeBackupOwner\n    (\n        address addr\n    )\n    public\n    onlyOwner\n    isBackupOwner(addr)\n    {\n        uint256 toBeDeletedIndex = backupOwnerIndicesMap[addr];\n\n        uint256 lastIndex = backupOwnerAddressList.length - 1;\n        address lastAddress = backupOwnerAddressList[lastIndex];\n\n        backupOwnerIndicesMap[lastAddress] = toBeDeletedIndex;\n\n        // swap\n        backupOwnerAddressList[toBeDeletedIndex] = lastAddress;\n\n        backupOwnerAddressList.pop();\n        delete backupOwnerIndicesMap[addr];\n        delete backupOwnerDataMap[addr];\n    }\n\n    /**\n * @dev Activate the sender as owner if he has the minimum number of votes.\n *\n *\n */\n    function activateOwnership()\n    external\n    onlyBackupOwner\n    {\n        uint counter = 0;\n        for (uint i = 0; i < backupOwnerAddressList.length; i++) {\n            address voter = backupOwnerAddressList[i];\n            if (backupOwnerDataMap[voter].newOwner == msg.sender) {\n                counter++;\n            }\n        }\n        require(counter >= minNumberOfVotes, \"Minimum number of votes not reached!\");\n        _transferOwnership(msg.sender);\n        removeBackupOwner(msg.sender);\n    }\n\n\n    function addBackupOwner\n    (\n        address newBackupOwner\n    )\n    external\n    onlyOwner\n    isNotOwner(newBackupOwner)\n    isNotBackupOwner(newBackupOwner)\n    {\n        backupOwnerAddressList.push(newBackupOwner);\n        backupOwnerDataMap[newBackupOwner] = BackupOwnerData({newOwner: owner(), timestamp: block.timestamp});\n        backupOwnerIndicesMap[newBackupOwner] = backupOwnerAddressList.length - 1;\n    }\n\n\n    function voteForNewOwner\n    (\n        address newOwner\n    )\n    external\n    onlyBackupOwner\n    isBackupOwner(newOwner)\n    isNotOwner(newOwner)\n    {\n        backupOwnerDataMap[msg.sender].newOwner = newOwner;\n        backupOwnerDataMap[msg.sender].timestamp = block.timestamp;\n    }\n\n\n}\n\n// File: contracts/domain/ContractRegistry.sol\n\npragma solidity ^0.8.0;\n\n// Attributes for a Contract Registry\n\n//\n// *contractAddress: real contract address\n// *name: some reasonable name eg.: GlaruSoft AG Share\n// desription: decription of the contract instance\n// constructorArgs: constructor values in order of constructor parameters as stringified JSON: [\"GlaruSoft AG\", \"GLS\"]\n// url: main url of this contract (usage, documentation etc.)\n// sourceCodeUrl: URL to the source code\n// contractName: eg.: ERC884Base\n// contractType: eg.: ERC-884\n// status: eg.: active, paused, removed\n// created: time of register (seconds after 1970-01-01)\n//\n\n// Only the owner can insert and update data!\n\ncontract ContractRegistry is OwnableWithBackup\n{\n    event RegisterContractData(address indexed contractAddress, string indexed contractName, string indexed name);\n    event UnregisterContractData(address indexed contractAddress, string indexed contractName, string indexed name);\n    event UpdateContractData(address indexed contractAddress, string indexed oldName, string indexed newName);\n\n    string constant public NAME_NOT_EMPTY = 'ContractRegistry: name can not be empty';\n    string constant public NOT_REGISTERED = 'ContractRegistry : contract address is not registered';\n    string constant public ADDRESS_NOT_ZERO = 'ContractRegistry : contract address can not be zero';\n    string constant public NOT_A_CONTRACT = 'ContractRegistry : contract address is not a contract address';\n    string constant public ALREADY_REGISTERED = 'ContractRegistry : contract address is already registered';\n    string constant public NAME_IS_TAKEN = 'ContractRegistry : name is already taken';\n\n    struct ContractData {\n\n        address contractAddress;\n        string name;\n        string description;\n        string constructorArgs;\n\n        string url;\n        string sourceCodeUrl;\n        string contractName;\n        string contractType;\n\n        string status;\n        uint created;\n        uint updated;\n    }\n\n    mapping(address => ContractData) public registerMap;\n    mapping(string => address) public reverseMap;\n    address[] public addressList;\n    mapping(address => uint) public indexMap;\n\n    function register(ContractData memory _entry) external onlyOwner {\n\n        require(bytes(_entry.name).length > 0, NAME_NOT_EMPTY);\n        require(_entry.contractAddress != address(0), ADDRESS_NOT_ZERO);\n        require(_entry.contractAddress.code.length > 0, NOT_A_CONTRACT);\n        require(registerMap[_entry.contractAddress].contractAddress == address(0), ALREADY_REGISTERED);\n        require(reverseMap[_entry.name] == address(0), NAME_IS_TAKEN);\n\n        registerMap[_entry.contractAddress] = _entry;\n        reverseMap[_entry.name] = _entry.contractAddress;\n        registerMap[_entry.contractAddress].created = block.timestamp;\n\n        addressList.push(_entry.contractAddress);\n        indexMap[_entry.contractAddress] = addressList.length - 1;\n\n        emit RegisterContractData(_entry.contractAddress, _entry.contractName, _entry.name);\n    }\n\n\n    function update(ContractData memory _entry) external onlyOwner {\n\n        address _contractAddress = _entry.contractAddress;\n        string memory _new_name = _entry.name;\n        require(_contractAddress != address(0), ADDRESS_NOT_ZERO);\n        require(bytes(_new_name).length > 0, NAME_NOT_EMPTY);\n\n        require(registerMap[_contractAddress].contractAddress != address(0), NOT_REGISTERED);\n\n        string memory _old_name = registerMap[_contractAddress].name;\n\n\n        require(reverseMap[_new_name] == _contractAddress || reverseMap[_new_name] == address(0), NAME_IS_TAKEN);\n\n        if (reverseMap[_new_name] != _contractAddress){\n            delete reverseMap[_old_name];\n            reverseMap[_new_name]=_contractAddress;\n        }\n        _entry.created = registerMap[_contractAddress].created ;\n        _entry.updated = block.timestamp;\n        registerMap[_contractAddress]=_entry;\n\n        emit UpdateContractData(_entry.contractAddress, _old_name, _new_name);\n    }\n\n    function unregister(address _contractAddress) external onlyOwner {\n        string memory _name = registerMap[_contractAddress].name;\n        string memory _contractName = registerMap[_contractAddress].contractName;\n        require(bytes(_name).length > 0, NOT_REGISTERED);\n        uint256 toBeDeletedIndex = indexMap[_contractAddress];\n\n        require(addressList.length > 0, 'no entry');\n        require(toBeDeletedIndex >= 0, 'index missing');\n\n        require(addressList[toBeDeletedIndex] == _contractAddress, 'contract missing');\n\n\n        uint256 lastIndex = addressList.length - 1;\n        address lastAddress = addressList[lastIndex];\n\n// move last address to to-be-deleted-address\n        addressList[toBeDeletedIndex] = lastAddress;\n        indexMap[lastAddress] = toBeDeletedIndex;\n\n        addressList.pop();\n        delete indexMap[_contractAddress];\n\n        delete registerMap[_contractAddress];\n        delete reverseMap[_name];\n\n        emit UnregisterContractData(_contractAddress, _contractName, _name);\n    }\n\n    function getContractDataCount() external view returns (uint){\n        return addressList.length;\n    }\n\n\n    function getContractData(uint index) external view returns (ContractData memory){\n        return registerMap[addressList[index]];\n    }\n\n    function setStatus(address _contractAddress, string memory _status) external onlyOwner {\n        string memory _name = registerMap[_contractAddress].name;\n        require(bytes(_name).length > 0, NOT_REGISTERED);\n        registerMap[_contractAddress].status = _status;\n    }\n\n    function getByAddress(address contractAddress) public view returns (ContractData memory){\n        return registerMap[contractAddress];\n    }\n\n    function getByName(string memory _name) public view returns (ContractData memory){\n        address ca = reverseMap[_name];\n        return getByAddress(ca);\n    }\n\n\n}\n";
export const contractRegistry_Version    = "solc-emscripten-wasm32-v0.8.0+commit.c7dfd78e.js";